{"meta":{"title":"宁静致远","subtitle":"blog","description":"花开堪折直须折,莫待无花空折枝。","author":"宁静致远","url":"https://hujiahao.top","root":"/"},"pages":[{"title":"分类","date":"2020-04-23T01:25:09.000Z","updated":"2020-04-23T01:25:09.000Z","comments":true,"path":"categories/index.html","permalink":"https://hujiahao.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-04-29T11:57:59.725Z","updated":"2020-04-29T11:57:59.725Z","comments":true,"path":"nav.html","permalink":"https://hujiahao.top/nav.html","excerpt":"","text":"window.onload=function(){ window.location.href = 'https://www.baidu.com/'; }"},{"title":"","date":"2020-03-29T23:59:52.000Z","updated":"2020-03-29T23:59:52.000Z","comments":true,"path":"about/index.html","permalink":"https://hujiahao.top/about/index.html","excerpt":"","text":"关于 关于博主： 在校学生，软件工程专业，对web开发有着浓厚的兴趣。 现在主要学习java后端开发 性格内向,不喜交际 平时爱刷B站、论坛和博客，关注前沿技术。 喜欢打球，看电影，看书。 关于本站： 基于Hexo框架，部署在Github和Coding上。 本博客是作者在学习开发过程中积累的笔记，文章体裁不限。自 2020年4月开始一直持续更新。如果这些笔记对你的学习有帮助，欢迎通过以下方式支持一下，你的支持是我持续维护的动力👇👇 联系方式 Email: &#x38;&#x36;&#x32;&#57;&#x36;&#48;&#48;&#52;&#48;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d; QQ:862960040"},{"title":"links","date":"2020-04-23T01:27:48.000Z","updated":"2020-04-23T01:27:48.000Z","comments":true,"path":"links/index.html","permalink":"https://hujiahao.top/links/index.html","excerpt":"","text":""},{"title":"","date":"2021-03-15T15:11:33.479Z","updated":"2021-03-15T15:11:33.479Z","comments":true,"path":"friends/index.html","permalink":"https://hujiahao.top/friends/index.html","excerpt":"","text":""},{"title":"Love💕相爱","date":"2021-03-14T06:06:21.262Z","updated":"2021-03-14T06:06:21.262Z","comments":true,"path":"love/index1.html","permalink":"https://hujiahao.top/love/index1.html","excerpt":"","text":"时光轴😘 //这是要遍历时间轴的数据 var dimeAxis=[ { date:'2 0 2 1 年', title:'"},{"title":"","date":"2021-03-16T12:37:18.191Z","updated":"2021-03-16T12:37:18.191Z","comments":true,"path":"love/index.html","permalink":"https://hujiahao.top/love/index.html","excerpt":"","text":"时光轴💕 这里记录着文儿与豪一起完成的事🧑👧 2021 2021-02-27 我们一起去看了《人潮汹涌》。 2021-02-26 我们一起共度元宵夜。 2021-02-10 20:05 最有默契的一次。 2021-01-31 100 天 快 乐 ！ 2020 2020-12-31 和你第一次跨年，我们去看了《温暖的抱抱》,还去了郑州最文艺的商城-永威木色购物公园,然后在会展中心看了美丽的夜景,并在玉米楼前合影。 2020-12-12 我们一起去看了《如果声音不记得》,然后我们第一次亲吻啦😘 2020-11-21 我们一起去看了《风平浪静》,还第一次牵你的小手 2020-10-31 我们一起去看了《一点就到家》 2020-10-24 我们在一起啦❤️ Waiting for you … 在等你呢 …"},{"title":"","date":"2021-03-16T05:11:14.646Z","updated":"2021-03-16T05:11:14.646Z","comments":true,"path":"message/index.html","permalink":"https://hujiahao.top/message/index.html","excerpt":"","text":""},{"title":"","date":"2021-02-05T05:41:03.794Z","updated":"2021-02-05T05:41:03.794Z","comments":true,"path":"love1/index.html","permalink":"https://hujiahao.top/love1/index.html","excerpt":"","text":"Love 时光轴💕 2021年 1月31日2021 100 天 快 乐 ！ 2020年 12月31日2020 和你第一次跨年，我们去看了《温暖的抱抱》，还去了郑州最文艺的商城——永威木色购物公园，然后在会展中心看了美丽的夜景，并在玉米楼前合影。 12月12日2020 我们一起去看了《如果声音不记得》,然后我们第一次亲吻啦😘 11月21日2020 我们一起去看了《风平浪静》,还第一次牵你的小手 10月31日2020 我们一起去看了《一点就到家》 10月24日2020 我们在一起啦❤️ Waitingfor you ... 在等你呢... 一起做💕 一起要做的100件事。"},{"title":"标签","date":"2020-03-31T08:33:07.000Z","updated":"2020-03-31T08:33:07.000Z","comments":true,"path":"tags/index.html","permalink":"https://hujiahao.top/tags/index.html","excerpt":"","text":""},{"title":"Love💕Todos","date":"2021-03-01T13:06:06.083Z","updated":"2021-03-01T13:06:06.083Z","comments":true,"path":"todo/index.html","permalink":"https://hujiahao.top/todo/index.html","excerpt":"","text":"这里记录着文儿与豪将会一起完成的事🧑👧💕 //这是要遍历时间轴的数据 var lovetodos=[ { todo:'', achieve:'1.一起去电影院看一场电影', checked:'checked' }, { todo:'', achieve:'2.一起牵手逛街', checked:'checked' }, { todo:'3.一起去一趟迪士尼游乐园', achieve:'', checked:'' }, { todo:'4.一起去游泳', achieve:'' }, { todo:'5.一起唱歌并且录下来', achieve:'' }, { todo:'6.一起在厨房做次饭', achieve:'' }, {todo:'7.一起过次烛光晚餐🍷',achieve:'',checked:''}, {todo:'8.一起过生日',achieve:'',checked:''}, {todo:'9.一起打扫卫生',achieve:'',checked:''}, {todo:'10.一起去一次鬼屋',achieve:'',checked:''}, {todo:'11.一起去蹦极',achieve:'',checked:''}, {todo:'12.一起养一只宠物',achieve:'',checked:''}, {todo:'13.一起研究口红色号',achieve:'',checked:''}, {todo:'14.一起抓娃娃',achieve:'',checked:''}, {todo:'',achieve:'15.一起换情侣头像',checked:'checked'}, {todo:'16.一起去做次陶艺',achieve:'',checked:''}, {todo:'‍',achieve:'17.一起锻炼身体🤸',checked:'checked'}, {todo:'18.一起去吃一次全家桶',achieve:'',checked:''}, {todo:'19.一起去旅游⛰',achieve:'',checked:''}, {todo:'20.一起换手机壁纸',achieve:'',checked:''}, {todo:'21.一起坐一次摩天轮',achieve:'',checked:''}, {todo:'22.一起拍视频记录生活',achieve:'',checked:''}, {todo:'23.一起刷牙，然后亲亲',achieve:'',checked:''}, {todo:'24.一起去看一次海，去沙滩👙',achieve:'',checked:''}, {todo:'25.一起去爬山',achieve:'',checked:''}, {todo:'26.一起看日出',achieve:'',checked:''}, {todo:'27.互穿对方的衣服，拍照留念',achieve:'',checked:''}, {todo:'28.一起坐一次摩天轮',achieve:'',checked:''}, {todo:'29.一起逛超市买好吃的',achieve:'',checked:''}, {todo:'30.一起去书店看书，分享自己喜欢的书籍📕',achieve:'',checked:''}, {todo:'31.一起在下雨天追剧☔️',achieve:'',checked:''}, {todo:'32.一起做一次蛋糕甜点',achieve:'',checked:''}, {todo:'33.一起看日落',achieve:'',checked:''}, {todo:'34.一起上下班，坐地铁',achieve:'',checked:''}, {todo:'35.一起弹吉他',achieve:'',checked:''}, {todo:'36.一起去买菜',achieve:'',checked:''}, {todo:'37.一起玩游戏🎮',achieve:'',checked:''}, {todo:'38.一起坐一次飞机✈️',achieve:'',checked:''}, {todo:'39.一起种花草',achieve:'',checked:''}, {todo:'40.一起养宠物',achieve:'',checked:''}, {todo:'41.一起用情侣手机壳',achieve:'',checked:''}, {todo:'42.一起去一次海底世界',achieve:'',checked:''}, {todo:'43.一起喝醉一次',achieve:'',checked:''}, {todo:'44.一起打扑克牌♣️',achieve:'',checked:''}, {todo:'45.一起去天安门看升国旗',achieve:'',checked:''}, {todo:'46.一起修理电器',achieve:'',checked:''}, {todo:'47.一起看烟花',achieve:'',checked:''}, {todo:'',achieve:'48.一起吃火锅',checked:'checked'}, {todo:'49.一起庆祝恋爱纪念日',achieve:'',checked:''}, {todo:'50.一起去一次教堂⛪️',achieve:'',checked:''}, {todo:'51.一起看雪，堆雪人☃️',achieve:'',checked:''}, {todo:'52.一起换发型，剪头发',achieve:'',checked:''}, {todo:'53.一起和朋友们去吃饭',achieve:'',checked:''}, {todo:'',achieve:'54.一起听音乐，听同一首歌',checked:'checked'}, {todo:'55.一起坐一次船',achieve:'',checked:''}, {todo:'56.一起露营，住一次帐篷 ⛺',achieve:'',checked:''}, {todo:'57.一起DIY手工✂️',achieve:'',checked:''}, {todo:'',achieve:'58.给对方准备礼物',checked:'checked'}, {todo:'59.一起去我们上过的小学',achieve:'',checked:''}, {todo:'60.一起去我们上过的中学',achieve:'',checked:''}, {todo:'61.一起去我们上过的大学',achieve:'',checked:''}, {todo:'62.一起在沙发上躺着',achieve:'',checked:''}, {todo:'63.一起睡个懒觉，赖个床😴',achieve:'',checked:''}, {todo:'64.偷偷为对方买喜欢又舍不得的东西',achieve:'',checked:''}, {todo:'65.互换角色一天',achieve:'',checked:''}, {todo:'66.一起坐一次巴士，在没去过的地方下车',achieve:'',checked:''}, {todo:'67.一起规划未来',achieve:'',checked:''}, {todo:'68.给对方准备一次浪漫的求婚✨',achieve:'',checked:''}, {todo:'69.一起在午夜看一次恐怖片',achieve:'',checked:''}, {todo:'70.一起安静的听雨声',achieve:'',checked:''}, {todo:'71.一起看一场演唱会',achieve:'',checked:''}, {todo:'72.一起去挑选一束花',achieve:'',checked:''}, {todo:'73.一起去跳一次广场舞',achieve:'',checked:''}, {todo:'74.一起去见证一次别人的婚礼',achieve:'',checked:''}, {todo:'75.一起为对方按摩一次',achieve:'',checked:''}, {todo:'76.一起放一次风筝',achieve:'',checked:''}, {todo:'77.一起吐槽一次对方的缺点',achieve:'',checked:''}, {todo:'78.一起打扮自己',achieve:'',checked:''}, {todo:'79.一起去见彼此的朋友',achieve:'',checked:''}, {todo:'80.一起看星星⭐',achieve:'',checked:''}, {todo:'81.一起为对方剪指甲',achieve:'',checked:''}, {todo:'82.一起去看樱花',achieve:'',checked:''}, {todo:'83.一起敷面膜',achieve:'',checked:''}, {todo:'84.一起去自驾游',achieve:'',checked:''}, {todo:'85.一起去一次动物园',achieve:'',checked:''}, {todo:'86.一起骑自行车',achieve:'',checked:''}, {todo:'87.一起拍照洗照片贴房间',achieve:'',checked:''}, {todo:'88.一起洗衣服',achieve:'',checked:''}, {todo:'89.为对方录想对他说的话',achieve:'',checked:''}, {todo:'90.一起去听一次相声',achieve:'',checked:''}, {todo:'91.一起玩一次真心话大冒险⛳',achieve:'',checked:''}, {todo:'92.一起去许愿池许个愿❣️',achieve:'',checked:''}, {todo:'93.一起入住一次五星级酒店，看夜景',achieve:'',checked:''}, {todo:'94.一起去K歌',achieve:'',checked:''}, {todo:'95.一起穿情侣装',achieve:'',checked:''}, {todo:'95.一起拜见父母',achieve:'',checked:''}, {todo:'96.一起挑选婚纱',achieve:'',checked:''}, {todo:'97.一起装修我们的房子',achieve:'',checked:''}, {todo:'98.一起做饭',achieve:'',checked:''}, {todo:'99.一起为我们的小家添置东西',achieve:'',checked:''}, {todo:'100.在一起啊，也不算太久，就余生吧',achieve:'',checked:''}, ]; $(document).ready(function(){ $.each(lovetodos,function(i,e){ var html='' + e.todo+''+e.achieve+''+'' ; $('.love-todos').append(html); }); });"},{"title":"搜索","date":"2021-01-14T07:01:20.801Z","updated":"2021-01-14T07:01:20.801Z","comments":true,"path":"search/index.html","permalink":"https://hujiahao.top/search/index.html","excerpt":"","text":""},{"title":"时光轴","date":"2021-02-03T09:47:44.839Z","updated":"2021-02-03T09:47:44.839Z","comments":true,"path":"love/photos/index.html","permalink":"https://hujiahao.top/love/photos/index.html","excerpt":"","text":""},{"title":"Love💕Todos","date":"2021-02-08T06:44:09.459Z","updated":"2021-02-08T06:44:09.459Z","comments":true,"path":"love/todo/index.html","permalink":"https://hujiahao.top/love/todo/index.html","excerpt":"","text":"这里记录着文儿与豪将会一起完成的事🧑👧💕 1.一起去电影院看一场电影 //这是要遍历时间轴的数据 var lovetodos=[ { todo:'', achieve:'1.一起去电影院看一场电影', checked:'checked' }, { todo:'', achieve:'2.一起牵手逛街', checked:'checked' }, { todo:'3.一起去一趟迪士尼游乐园', achieve:'', checked:'' }, { todo:'4.一起去游泳', achieve:'' }, { todo:'5.一起唱歌并且录下来', achieve:'' }, { todo:'6.一起在厨房做次饭', achieve:'' }, {todo:'7.一起过次烛光晚餐🍷',achieve:'',checked:''}, {todo:'8.一起过生日',achieve:'',checked:''}, {todo:'9.一起打扫卫生',achieve:'',checked:''}, {todo:'10.一起去一次鬼屋',achieve:'',checked:''}, {todo:'11.一起去蹦极',achieve:'',checked:''}, {todo:'12.一起养一只宠物',achieve:'',checked:''}, {todo:'13.一起研究口红色号',achieve:'',checked:''}, {todo:'14.一起抓娃娃',achieve:'',checked:''}, {todo:'',achieve:'15.一起换情侣头像',checked:'checked'}, {todo:'16.一起去做次陶艺',achieve:'',checked:''}, {todo:'‍',achieve:'17.一起锻炼身体🤸',checked:'checked'}, {todo:'18.一起去吃一次全家桶',achieve:'',checked:''}, {todo:'19.一起去旅游⛰',achieve:'',checked:''}, {todo:'20.一起换手机壁纸',achieve:'',checked:''}, {todo:'21.一起坐一次摩天轮',achieve:'',checked:''}, {todo:'22.一起拍视频记录生活',achieve:'',checked:''}, {todo:'23.一起刷牙，然后亲亲',achieve:'',checked:''}, {todo:'24.一起去看一次海，去沙滩👙',achieve:'',checked:''}, {todo:'25.一起去爬山',achieve:'',checked:''}, {todo:'26.一起看日出',achieve:'',checked:''}, {todo:'27.互穿对方的衣服，拍照留念',achieve:'',checked:''}, {todo:'28.一起坐一次摩天轮',achieve:'',checked:''}, {todo:'29.一起逛超市买好吃的',achieve:'',checked:''}, {todo:'30.一起去书店看书，分享自己喜欢的书籍📕',achieve:'',checked:''}, {todo:'31.一起在下雨天追剧☔️',achieve:'',checked:''}, {todo:'32.一起做一次蛋糕甜点',achieve:'',checked:''}, {todo:'33.一起看日落',achieve:'',checked:''}, {todo:'34.一起上下班，坐地铁',achieve:'',checked:''}, {todo:'35.一起弹吉他',achieve:'',checked:''}, {todo:'36.一起去买菜',achieve:'',checked:''}, {todo:'37.一起玩游戏🎮',achieve:'',checked:''}, {todo:'38.一起坐一次飞机✈️',achieve:'',checked:''}, {todo:'39.一起种花草',achieve:'',checked:''}, {todo:'40.一起养宠物',achieve:'',checked:''}, {todo:'41.一起用情侣手机壳',achieve:'',checked:''}, {todo:'42.一起去一次海底世界',achieve:'',checked:''}, {todo:'43.一起喝醉一次',achieve:'',checked:''}, {todo:'44.一起打扑克牌♣️',achieve:'',checked:''}, {todo:'45.一起去天安门看升国旗',achieve:'',checked:''}, {todo:'46.一起修理电器',achieve:'',checked:''}, {todo:'47.一起看烟花',achieve:'',checked:''}, {todo:'',achieve:'48.一起吃火锅',checked:'checked'}, {todo:'49.一起庆祝恋爱纪念日',achieve:'',checked:''}, {todo:'50.一起去一次教堂⛪️',achieve:'',checked:''}, {todo:'51.一起看雪，堆雪人☃️',achieve:'',checked:''}, {todo:'52.一起换发型，剪头发',achieve:'',checked:''}, {todo:'53.一起和朋友们去吃饭',achieve:'',checked:''}, {todo:'',achieve:'54.一起听音乐，听同一首歌',checked:'checked'}, {todo:'55.一起坐一次船',achieve:'',checked:''}, {todo:'56.一起露营，住一次帐篷 ⛺',achieve:'',checked:''}, {todo:'57.一起DIY手工✂️',achieve:'',checked:''}, {todo:'',achieve:'58.给对方准备礼物',checked:'checked'}, {todo:'59.一起去我们上过的小学',achieve:'',checked:''}, {todo:'60.一起去我们上过的中学',achieve:'',checked:''}, {todo:'61.一起去我们上过的大学',achieve:'',checked:''}, {todo:'62.一起在沙发上躺着',achieve:'',checked:''}, {todo:'63.一起睡个懒觉，赖个床😴',achieve:'',checked:''}, {todo:'64.偷偷为对方买喜欢又舍不得的东西',achieve:'',checked:''}, {todo:'65.互换角色一天',achieve:'',checked:''}, {todo:'66.一起坐一次巴士，在没去过的地方下车',achieve:'',checked:''}, {todo:'67.一起规划未来',achieve:'',checked:''}, {todo:'68.给对方准备一次浪漫的求婚✨',achieve:'',checked:''}, {todo:'69.一起在午夜看一次恐怖片',achieve:'',checked:''}, {todo:'70.一起安静的听雨声',achieve:'',checked:''}, {todo:'71.一起看一场演唱会',achieve:'',checked:''}, {todo:'72.一起去挑选一束花',achieve:'',checked:''}, {todo:'73.一起去跳一次广场舞',achieve:'',checked:''}, {todo:'74.一起去见证一次别人的婚礼',achieve:'',checked:''}, {todo:'75.一起为对方按摩一次',achieve:'',checked:''}, {todo:'76.一起放一次风筝',achieve:'',checked:''}, {todo:'77.一起吐槽一次对方的缺点',achieve:'',checked:''}, {todo:'78.一起打扮自己',achieve:'',checked:''}, {todo:'79.一起去见彼此的朋友',achieve:'',checked:''}, {todo:'80.一起看星星⭐',achieve:'',checked:''}, {todo:'81.一起为对方剪指甲',achieve:'',checked:''}, {todo:'82.一起去看樱花',achieve:'',checked:''}, {todo:'83.一起敷面膜',achieve:'',checked:''}, {todo:'84.一起去自驾游',achieve:'',checked:''}, {todo:'85.一起去一次动物园',achieve:'',checked:''}, {todo:'86.一起骑自行车',achieve:'',checked:''}, {todo:'87.一起拍照洗照片贴房间',achieve:'',checked:''}, {todo:'88.一起洗衣服',achieve:'',checked:''}, {todo:'89.为对方录想对他说的话',achieve:'',checked:''}, {todo:'90.一起去听一次相声',achieve:'',checked:''}, {todo:'91.一起玩一次真心话大冒险⛳',achieve:'',checked:''}, {todo:'92.一起去许愿池许个愿❣️',achieve:'',checked:''}, {todo:'93.一起入住一次五星级酒店，看夜景',achieve:'',checked:''}, {todo:'94.一起去K歌',achieve:'',checked:''}, {todo:'95.一起穿情侣装',achieve:'',checked:''}, {todo:'95.一起拜见父母',achieve:'',checked:''}, {todo:'96.一起挑选婚纱',achieve:'',checked:''}, {todo:'97.一起装修我们的房子',achieve:'',checked:''}, {todo:'98.一起做饭',achieve:'',checked:''}, {todo:'99.一起为我们的小家添置东西',achieve:'',checked:''}, {todo:'100.在一起啊，也不算太久，就余生吧',achieve:'',checked:''}, ]; $(function(){ $.each(lovetodos,function(i,e){ var html='' + e.todo+''+e.achieve+''+'' ; $('.love-todos').append(html); }); });"},{"title":"","date":"2021-02-08T06:16:24.071Z","updated":"2021-02-08T06:16:24.071Z","comments":true,"path":"love/todo/index.html","permalink":"https://hujiahao.top/love/todo/index.html","excerpt":"","text":"这里记录着文儿与豪将会一起完成的事🧑👧💕 //这是要遍历时间轴的数据 var lovetodos=[ { todo:'', achieve:'1.一起去电影院看一场电影', checked:'checked' }, { todo:'', achieve:'2.一起牵手逛街', checked:'checked' }, { todo:'3.一起去一趟迪士尼游乐园', achieve:'', checked:'' }, { todo:'4.一起去游泳', achieve:'' }, { todo:'5.一起唱歌并且录下来', achieve:'' }, { todo:'6.一起在厨房做次饭', achieve:'' }, {todo:'7.一起过次烛光晚餐🍷',achieve:'',checked:''}, {todo:'8.一起过生日',achieve:'',checked:''}, {todo:'9.一起打扫卫生',achieve:'',checked:''}, {todo:'10.一起去一次鬼屋',achieve:'',checked:''}, {todo:'11.一起去蹦极',achieve:'',checked:''}, {todo:'12.一起养一只宠物',achieve:'',checked:''}, {todo:'13.一起研究口红色号',achieve:'',checked:''}, {todo:'14.一起抓娃娃',achieve:'',checked:''}, {todo:'',achieve:'15.一起换情侣头像',checked:'checked'}, {todo:'16.一起去做次陶艺',achieve:'',checked:''}, {todo:'‍',achieve:'17.一起锻炼身体🤸',checked:'checked'}, {todo:'18.一起去吃一次全家桶',achieve:'',checked:''}, {todo:'19.一起去旅游⛰',achieve:'',checked:''}, {todo:'20.一起换手机壁纸',achieve:'',checked:''}, {todo:'21.一起坐一次摩天轮',achieve:'',checked:''}, {todo:'22.一起拍视频记录生活',achieve:'',checked:''}, {todo:'23.一起刷牙，然后亲亲',achieve:'',checked:''}, {todo:'24.一起去看一次海，去沙滩👙',achieve:'',checked:''}, {todo:'25.一起去爬山',achieve:'',checked:''}, {todo:'26.一起看日出',achieve:'',checked:''}, {todo:'27.互穿对方的衣服，拍照留念',achieve:'',checked:''}, {todo:'28.一起坐一次摩天轮',achieve:'',checked:''}, {todo:'29.一起逛超市买好吃的',achieve:'',checked:''}, {todo:'30.一起去书店看书，分享自己喜欢的书籍📕',achieve:'',checked:''}, {todo:'31.一起在下雨天追剧☔️',achieve:'',checked:''}, {todo:'32.一起做一次蛋糕甜点',achieve:'',checked:''}, {todo:'33.一起看日落',achieve:'',checked:''}, {todo:'34.一起上下班，坐地铁',achieve:'',checked:''}, {todo:'35.一起弹吉他',achieve:'',checked:''}, {todo:'36.一起去买菜',achieve:'',checked:''}, {todo:'37.一起玩游戏🎮',achieve:'',checked:''}, {todo:'38.一起坐一次飞机✈️',achieve:'',checked:''}, {todo:'39.一起种花草',achieve:'',checked:''}, {todo:'40.一起养宠物',achieve:'',checked:''}, {todo:'41.一起用情侣手机壳',achieve:'',checked:''}, {todo:'42.一起去一次海底世界',achieve:'',checked:''}, {todo:'43.一起喝醉一次',achieve:'',checked:''}, {todo:'44.一起打扑克牌♣️',achieve:'',checked:''}, {todo:'45.一起去天安门看升国旗',achieve:'',checked:''}, {todo:'46.一起修理电器',achieve:'',checked:''}, {todo:'47.一起看烟花',achieve:'',checked:''}, {todo:'',achieve:'48.一起吃火锅',checked:'checked'}, {todo:'49.一起庆祝恋爱纪念日',achieve:'',checked:''}, {todo:'50.一起去一次教堂⛪️',achieve:'',checked:''}, {todo:'51.一起看雪，堆雪人☃️',achieve:'',checked:''}, {todo:'52.一起换发型，剪头发',achieve:'',checked:''}, {todo:'53.一起和朋友们去吃饭',achieve:'',checked:''}, {todo:'',achieve:'54.一起听音乐，听同一首歌',checked:'checked'}, {todo:'55.一起坐一次船',achieve:'',checked:''}, {todo:'56.一起露营，住一次帐篷 ⛺',achieve:'',checked:''}, {todo:'57.一起DIY手工✂️',achieve:'',checked:''}, {todo:'',achieve:'58.给对方准备礼物',checked:'checked'}, {todo:'59.一起去我们上过的小学',achieve:'',checked:''}, {todo:'60.一起去我们上过的中学',achieve:'',checked:''}, {todo:'61.一起去我们上过的大学',achieve:'',checked:''}, {todo:'62.一起在沙发上躺着',achieve:'',checked:''}, {todo:'63.一起睡个懒觉，赖个床😴',achieve:'',checked:''}, {todo:'64.偷偷为对方买喜欢又舍不得的东西',achieve:'',checked:''}, {todo:'65.互换角色一天',achieve:'',checked:''}, {todo:'66.一起坐一次巴士，在没去过的地方下车',achieve:'',checked:''}, {todo:'67.一起规划未来',achieve:'',checked:''}, {todo:'68.给对方准备一次浪漫的求婚✨',achieve:'',checked:''}, {todo:'69.一起在午夜看一次恐怖片',achieve:'',checked:''}, {todo:'70.一起安静的听雨声',achieve:'',checked:''}, {todo:'71.一起看一场演唱会',achieve:'',checked:''}, {todo:'72.一起去挑选一束花',achieve:'',checked:''}, {todo:'73.一起去跳一次广场舞',achieve:'',checked:''}, {todo:'74.一起去见证一次别人的婚礼',achieve:'',checked:''}, {todo:'75.一起为对方按摩一次',achieve:'',checked:''}, {todo:'76.一起放一次风筝',achieve:'',checked:''}, {todo:'77.一起吐槽一次对方的缺点',achieve:'',checked:''}, {todo:'78.一起打扮自己',achieve:'',checked:''}, {todo:'79.一起去见彼此的朋友',achieve:'',checked:''}, {todo:'80.一起看星星⭐',achieve:'',checked:''}, {todo:'81.一起为对方剪指甲',achieve:'',checked:''}, {todo:'82.一起去看樱花',achieve:'',checked:''}, {todo:'83.一起敷面膜',achieve:'',checked:''}, {todo:'84.一起去自驾游',achieve:'',checked:''}, {todo:'85.一起去一次动物园',achieve:'',checked:''}, {todo:'86.一起骑自行车',achieve:'',checked:''}, {todo:'87.一起拍照洗照片贴房间',achieve:'',checked:''}, {todo:'88.一起洗衣服',achieve:'',checked:''}, {todo:'89.为对方录想对他说的话',achieve:'',checked:''}, {todo:'90.一起去听一次相声',achieve:'',checked:''}, {todo:'91.一起玩一次真心话大冒险⛳',achieve:'',checked:''}, {todo:'92.一起去许愿池许个愿❣️',achieve:'',checked:''}, {todo:'93.一起入住一次五星级酒店，看夜景',achieve:'',checked:''}, {todo:'94.一起去K歌',achieve:'',checked:''}, {todo:'95.一起穿情侣装',achieve:'',checked:''}, {todo:'95.一起拜见父母',achieve:'',checked:''}, {todo:'96.一起挑选婚纱',achieve:'',checked:''}, {todo:'97.一起装修我们的房子',achieve:'',checked:''}, {todo:'98.一起做饭',achieve:'',checked:''}, {todo:'99.一起为我们的小家添置东西',achieve:'',checked:''}, {todo:'100.在一起啊，也不算太久，就余生吧',achieve:'',checked:''}, ]; $(function(){ $.each(lovetodos,function(i,e){ var html='' + e.todo+''+e.achieve+''+'' ; $('.love-todos').append(html); }); });"},{"title":"","date":"2021-02-04T11:14:07.167Z","updated":"2021-02-04T11:14:07.167Z","comments":true,"path":"love/love/index.html","permalink":"https://hujiahao.top/love/love/index.html","excerpt":"","text":"jQuery自适应宽度动画时间轴代码 $(function(){ var bigEvent =[{ 'year' : 2015, 'events' :[ { 'mouths' : 2, 'times' :'2015年2月29', 'even' :'某某某创业团队正式成立，确定以“个性化定制”为核心的校园综合服务团队，覆盖20多所大学，成为小' },{ 'mouths' : 4, 'times' :'2015年4月3', 'even' :'某某某创业团队正式成立，确定以“个性化定制”为核心的校园综合服务团队，覆盖20多所大学，成为小' },{ 'mouths' : 10, 'times' :'2015年10月11日', 'even' :'某某某创业团队正式成立，确定以“个性化定制”为核心的校园综合服务团队，覆盖20多所大学，成为小' }] },{ 'year' : 2016, 'events' :[ { 'mouths' : 2, 'times' :'2016年2月18', 'even' :'某某某创业团队正式成立，确定以“个性化定制”为核心的校园综合服务团队，覆盖20多所大学，成为小' },{ 'mouths' : 4, 'times' :'2016年4月15', 'even' :'某某某创业团队正式成立，确定以“个性化定制”为核心的校园综合服务团队，覆盖20多所大学，成为小' } ]}]; $('.event_wrap').eventFlow({'events':bigEvent}); })"},{"title":"","date":"2021-01-26T07:01:46.567Z","updated":"2021-01-26T07:01:46.567Z","comments":true,"path":"love/新建文件夹/index.html","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/index.html","excerpt":"","text":"时间轴 时间轴 2020年 //这是要遍历时间轴的数据 var dimeAxis=[ { date:'12月31日', title:'和你第一次跨年，我们去看了《温暖的抱抱》，还去了郑州最文艺的商城——永威木色购物公园，然后在会展中心看了美丽的夜景，并在玉米楼前合影。', achievement:'' }, { date:'12月12日', title:'我们一起去看了《如果声音不记得》,然后我们第一次亲吻啦😘', achievement:'' }, { date:'11月21日', title:'我们一起去看了《风平浪静》,还第一次牵你的小手', achievement:'' }, { date:'10月31日', title:'我们一起去看了《一点就到家》', achievement:'' }, { date:'10月24日', title:'我们在一起啦❤️', achievement:'' }, { date:'Waiting for you ', title:'在等你呢', achievement:'' } ]; $(function(){ $.each(dimeAxis,function(i,e){ var html=''+ ''+e.date+''+ ''+e.achievement+''+ ''+e.title+''+ ''; $('.time-axis').append(html); }); });"},{"title":"","date":"2021-02-05T05:49:05.968Z","updated":"2021-02-05T05:49:05.968Z","comments":true,"path":"love1/css/history.css","permalink":"https://hujiahao.top/love1/css/history.css","excerpt":"","text":"body, p, form, input, textarea, ul, li, h1, h2, h3, h4, dl, dt, dd, table, td, th { margin:0; padding:0; } table, td, th { border-collapse:collapse; } ul, li { list-style:none; } h1, h2, h3, h4 { font-size:100%; } img, input, textarea { vertical-align: middle; border:0; } a { text-decoration:none; } a:hover { text-decoration:underline; } body { position:relative;} .clearfix:after{content:\" \"; display:block; height:0; clear:both; visibility:hidden;} .clearfix{zoom:1;} .fl { float:left;} .fr { float:right;} /*.public*/ .main {margin:0 auto; width:980px;} a { blr:expression(this.onFocus=this.blur()) } /*��� IE*/ a { outline:none; } /*���firefox��*/ .main { padding:45px 0; min-height:720px; } /*history*/ .history { background:url(../images/back2.png) repeat-y 204px 0; overflow:hidden; position:relative;} .history-date { overflow:hidden;} .history-date h2 { background:url(../images/icon1.jpg) #fff no-repeat 196px 0; height:17px; font-size:25px; font-family:΢���ź�; font-weight:normal; padding-left:45px; margin-bottom:74px; color:#00bbff } .history-date h2.first { position:absolute; left:0; top:0; width:935px; z-index:99;} .history-date h2 a { color:#00bbff; display:inline-block; *display:inline; zoom:1; margin:21px 97px 0 0;} .history-date h2 a:hover { text-decoration:none;} .history-date h2 img { vertical-align:-5px;} .history-date h2.date02 { background:none;} .history-date ul {} .history-date ul li { background:url(../images/icon2.jpg) no-repeat 180px 0; padding-bottom:50px; zoom:1; } .history-date ul li.last { padding-bottom:0;} .history-date ul li:after{content:\" \"; display:block; height:0; clear:both; visibility:hidden;} .history-date ul li h3 { float:left; width:168px; text-align:right; padding-right:19px;color:#c3c3c3; font:normal 18px/16px Arial;} .history-date ul li h3 span { display:block; color:#d0d0d0; font-size:12px;} .history-date ul li dl { float:left; padding-left:41px; margin-top:-5px; font-family:΢���ź�;} .history-date ul li dl dt { font:16px/22px ΢���ź�; color:#737373; } .history-date ul li dl dt span { display:block; color:#787878; font-size:12px;} .history-date ul li.green h3 { color:#1db702;} .history-date ul li.green h3 span { color:#a8dda3; } .history-date ul li.green dl { margin-top:-8px;} .history-date ul li.green dl dt { font-size:18px; line-height:28px;} .history-date ul li.green dl dt a { /*background:url(../images/icon09.gif) no-repeat 0 0; width:19px; height:16px;*/ display:inline-block; *display:inline; zoom:1; overflow:hidden; vertical-align: middle; margin-left:12px;} .history-date ul li.green dl dd { padding-top:20px; display:none;} .history-date ul li.green dl dd img { float:left;} .history-date ul li.green dl dd p { overflow:hidden; zoom:1; line-height:21px; color:#787878;} .history-date h2.first .more-history {font-size: 16px; background: transparent; margin-left: 30px;} .history-date h2.first .more-history:hover {text-decoration: underline;} *body .history-date ul li dl dt {_font-size:12px !important; _font-weight:bold;} *body .history-date ul li dl dt span {_font-weight:normal !important;} *body .history-date ul li.green dl dt a {_background:transparent !important; *background:transparent !important;*font-size:12px !important; _font-weight:normal !important;} .todo{ font-size: 18px; padding-left: 20px; text-decoration: none; } .todo:hover{ text-decoration: solid; }"},{"title":"","date":"2021-02-05T05:33:51.953Z","updated":"2021-02-05T05:33:51.953Z","comments":true,"path":"love1/todo/index.html","permalink":"https://hujiahao.top/love1/todo/index.html","excerpt":"","text":"Love 这里记录着文儿与豪将会一起完成的事🧑👧💕 //这是要遍历时间轴的数据 var lovetodos=[ { todo:'', achieve:'1.一起去电影院看一场电影', checked:'checked' }, { todo:'', achieve:'2.一起牵手逛街', checked:'checked' }, { todo:'3.一起去一趟迪士尼游乐园', achieve:'', checked:'' }, { todo:'4.一起去游泳', achieve:'' }, { todo:'5.一起唱歌并且录下来', achieve:'' }, { todo:'6.一起在厨房做次饭', achieve:'' }, {todo:'7.一起过次烛光晚餐🍷',achieve:'',checked:''}, {todo:'8.一起过生日',achieve:'',checked:''}, {todo:'9.一起打扫卫生',achieve:'',checked:''}, {todo:'10.一起去一次鬼屋',achieve:'',checked:''}, {todo:'11.一起去蹦极',achieve:'',checked:''}, {todo:'12.一起养一只宠物',achieve:'',checked:''}, {todo:'13.一起研究口红色号',achieve:'',checked:''}, {todo:'14.一起抓娃娃',achieve:'',checked:''}, {todo:'',achieve:'15.一起换情侣头像',checked:'checked'}, {todo:'16.一起去做次陶艺',achieve:'',checked:''}, {todo:'‍',achieve:'17.一起锻炼身体🤸',checked:'checked'}, {todo:'18.一起去吃一次全家桶',achieve:'',checked:''}, {todo:'19.一起去旅游⛰',achieve:'',checked:''}, {todo:'20.一起换手机壁纸',achieve:'',checked:''}, {todo:'21.一起坐一次摩天轮',achieve:'',checked:''}, {todo:'22.一起拍视频记录生活',achieve:'',checked:''}, {todo:'23.一起刷牙，然后亲亲',achieve:'',checked:''}, {todo:'24.一起去看一次海，去沙滩👙',achieve:'',checked:''}, {todo:'25.一起去爬山',achieve:'',checked:''}, {todo:'26.一起看日出',achieve:'',checked:''}, {todo:'27.互穿对方的衣服，拍照留念',achieve:'',checked:''}, {todo:'28.一起坐一次摩天轮',achieve:'',checked:''}, {todo:'29.一起逛超市买好吃的',achieve:'',checked:''}, {todo:'30.一起去书店看书，分享自己喜欢的书籍📕',achieve:'',checked:''}, {todo:'31.一起在下雨天追剧☔️',achieve:'',checked:''}, {todo:'32.一起做一次蛋糕甜点',achieve:'',checked:''}, {todo:'33.一起看日落',achieve:'',checked:''}, {todo:'34.一起上下班，坐地铁',achieve:'',checked:''}, {todo:'35.一起弹吉他',achieve:'',checked:''}, {todo:'36.一起去买菜',achieve:'',checked:''}, {todo:'37.一起玩游戏🎮',achieve:'',checked:''}, {todo:'38.一起坐一次飞机✈️',achieve:'',checked:''}, {todo:'39.一起种花草',achieve:'',checked:''}, {todo:'40.一起养宠物',achieve:'',checked:''}, {todo:'41.一起用情侣手机壳',achieve:'',checked:''}, {todo:'42.一起去一次海底世界',achieve:'',checked:''}, {todo:'43.一起喝醉一次',achieve:'',checked:''}, {todo:'44.一起打扑克牌♣️',achieve:'',checked:''}, {todo:'45.一起去天安门看升国旗',achieve:'',checked:''}, {todo:'46.一起修理电器',achieve:'',checked:''}, {todo:'47.一起看烟花',achieve:'',checked:''}, {todo:'',achieve:'48.一起吃火锅',checked:'checked'}, {todo:'49.一起庆祝恋爱纪念日',achieve:'',checked:''}, {todo:'50.一起去一次教堂⛪️',achieve:'',checked:''}, {todo:'51.一起看雪，堆雪人☃️',achieve:'',checked:''}, {todo:'52.一起换发型，剪头发',achieve:'',checked:''}, {todo:'53.一起和朋友们去吃饭',achieve:'',checked:''}, {todo:'',achieve:'54.一起听音乐，听同一首歌',checked:'checked'}, {todo:'55.一起坐一次船',achieve:'',checked:''}, {todo:'56.一起露营，住一次帐篷 ⛺',achieve:'',checked:''}, {todo:'57.一起DIY手工✂️',achieve:'',checked:''}, {todo:'',achieve:'58.给对方准备礼物',checked:'checked'}, {todo:'59.一起去我们上过的小学',achieve:'',checked:''}, {todo:'60.一起去我们上过的中学',achieve:'',checked:''}, {todo:'61.一起去我们上过的大学',achieve:'',checked:''}, {todo:'62.一起在沙发上躺着',achieve:'',checked:''}, {todo:'63.一起睡个懒觉，赖个床😴',achieve:'',checked:''}, {todo:'64.偷偷为对方买喜欢又舍不得的东西',achieve:'',checked:''}, {todo:'65.互换角色一天',achieve:'',checked:''}, {todo:'66.一起坐一次巴士，在没去过的地方下车',achieve:'',checked:''}, {todo:'67.一起规划未来',achieve:'',checked:''}, {todo:'68.给对方准备一次浪漫的求婚✨',achieve:'',checked:''}, {todo:'69.一起在午夜看一次恐怖片',achieve:'',checked:''}, {todo:'70.一起安静的听雨声',achieve:'',checked:''}, {todo:'71.一起看一场演唱会',achieve:'',checked:''}, {todo:'72.一起去挑选一束花',achieve:'',checked:''}, {todo:'73.一起去跳一次广场舞',achieve:'',checked:''}, {todo:'74.一起去见证一次别人的婚礼',achieve:'',checked:''}, {todo:'75.一起为对方按摩一次',achieve:'',checked:''}, {todo:'76.一起放一次风筝',achieve:'',checked:''}, {todo:'77.一起吐槽一次对方的缺点',achieve:'',checked:''}, {todo:'78.一起打扮自己',achieve:'',checked:''}, {todo:'79.一起去见彼此的朋友',achieve:'',checked:''}, {todo:'80.一起看星星⭐',achieve:'',checked:''}, {todo:'81.一起为对方剪指甲',achieve:'',checked:''}, {todo:'82.一起去看樱花',achieve:'',checked:''}, {todo:'83.一起敷面膜',achieve:'',checked:''}, {todo:'84.一起去自驾游',achieve:'',checked:''}, {todo:'85.一起去一次动物园',achieve:'',checked:''}, {todo:'86.一起骑自行车',achieve:'',checked:''}, {todo:'87.一起拍照洗照片贴房间',achieve:'',checked:''}, {todo:'88.一起洗衣服',achieve:'',checked:''}, {todo:'89.为对方录想对他说的话',achieve:'',checked:''}, {todo:'90.一起去听一次相声',achieve:'',checked:''}, {todo:'91.一起玩一次真心话大冒险⛳',achieve:'',checked:''}, {todo:'92.一起去许愿池许个愿❣️',achieve:'',checked:''}, {todo:'93.一起入住一次五星级酒店，看夜景',achieve:'',checked:''}, {todo:'94.一起去K歌',achieve:'',checked:''}, {todo:'95.一起穿情侣装',achieve:'',checked:''}, {todo:'95.一起拜见父母',achieve:'',checked:''}, {todo:'96.一起挑选婚纱',achieve:'',checked:''}, {todo:'97.一起装修我们的房子',achieve:'',checked:''}, {todo:'98.一起做饭',achieve:'',checked:''}, {todo:'99.一起为我们的小家添置东西',achieve:'',checked:''}, {todo:'100.在一起啊，也不算太久，就余生吧',achieve:'',checked:''}, ]; $(function(){ $.each(lovetodos,function(i,e){ var html='' + e.todo+''+e.achieve+''+'' ; $('.love-todos').append(html); }); });"},{"title":"","date":"2021-01-30T07:47:24.273Z","updated":"2021-01-30T07:47:24.273Z","comments":true,"path":"love/todo/css/LoveTodos.css","permalink":"https://hujiahao.top/love/todo/css/LoveTodos.css","excerpt":"","text":"*{ margin: 0; padding: 0; } .love-desc{ padding: 10px; border: 1px solid #03a9f4; border-radius: .4rem; background-color: #03a9f433; } .return{ float: right; } .love-todos{ margin-top: 30px; margin-left: 10px; font-size: 14px; color: #000; font-weight: 330; line-height: 30px; } .love-todos input{ margin-right: 10px; width: 15px; height: 15px; margin-right: 8px; }"},{"title":"","date":"2021-02-04T11:08:17.267Z","updated":"2021-02-04T11:08:17.267Z","comments":true,"path":"love/love/css/home.css","permalink":"https://hujiahao.top/love/love/css/home.css","excerpt":"","text":"html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; } body { line-height: 1; } ol, ul { list-style: none; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: ''; content: none; } table { border-collapse: collapse; border-spacing: 0; } /* display */ .dn{display:none;} .di{display:inline;} .db{display:block;} .dib{display:inline-block;} div.dib{*display:inline; *zoom:1;}/* other block level tag(eg. p, li, h1~h6), using 'inline_any' instead */ /* height */ .h0{height:0;} .h16{height:14px;} .h16{height:16px;} .h18{height:18px;} .h20{height:20px;} .h22{height:22px;} .h24{height:24px;} .h30{height:30px;} /* width */ /* percent width value */ .pct10{width:10%;} .pct15{width:15%;} .pct20{width:20%;} .pct25{width:25%;} .pct30{width:30%;} .pct33{width:33.3%;} .pct40{width:40%;} .pct50{width:50%;} .pct60{width:60%;} .pct66{width:66.6%;} .pct70{width:70%;} .pct75{width:75%;} .pct80{width:80%;} .pct90{width:90%;} .pct100{width:100%;} /* line-height */ .lh0{line-height:0;} .lh16{line-height:14px;} .lh16{line-height:16px;} .lh18{line-height:18px;} .lh20{line-height:20px;} .lh22{line-height:22px;} .lh24{line-height:24px;} .lh30{line-height:30px;} /* margin */ .m0{margin:0;} .ml1{margin-left:1px;} .ml2{margin-left:2px;} .ml5{margin-left:5px;} .ml10{margin-left:10px;} .ml15{margin-left:15px;} .ml20{margin-left:20px;} .ml30{margin-left:30px;} .mr1{margin-right:1px;} .mr2{margin-right:2px;} .mr5{margin-right:5px;} .mr10{margin-right:10px;} .mr15{margin-right:15px;} .mr20{margin-right:20px;} .mr30{margin-right:30px;} .mt1{margin-top:1px;} .mt2{margin-top:2px;} .mt5{margin-top:5px;} .mt10{margin-top:10px;} .mt15{margin-top:15px;} .mt20{margin-top:20px;} .mt30{margin-top:30px;} .mb1{margin-bottom:1px;} .mb2{margin-bottom:2px;} .mb5{margin-bottom:5px;} .mb10{margin-bottom:10px;} .mb15{margin-bottom:15px;} .mb20{margin-bottom:20px;} .mb30{margin-bottom:30px;} /* margin negative */ .ml-1{margin-left:-1px;} .mr-1{margin-right:-1px;} .mt-1{margin-top:-1px;} .mb-1{margin-bottom:-1px;} .ml-3{margin-left:-3px;} .mr-3{margin-right:-3px;} .mt-3{margin-top:-3px;} .mb-3{margin-bottom:-3px;} .ml-20{margin-left:-20px;} .mr-20{margin-right:-20px;} .mt-20{margin-top:-20px;} .mb-20{margin-bottom:-20px;} /* padding */ .p0{padding:0;} .p1{padding:1px;} .pl1{padding-left:1px;} .pt1{padding-top:1px;} .pr1{padding-right:1px;} .pb1{padding-bottom:1px;} .p2{padding:2px;} .pl2{padding-left:2px;} .pt2{padding-top:2px;} .pr2{padding-right:2px;} .pb2{padding-bottom:2px;} .pl5{padding-left:5px;} .p5{padding:5px;} .pt5{padding-top:5px;} .pr5{padding-right:5px;} .pb5{padding-bottom:5px;} .p10{padding:10px;} .pl10{padding-left:10px;} .pt10{padding-top:10px;} .pr10{padding-right:10px;} .pb10{padding-bottom:10px;} .p15{padding:15px;} .pl15{padding-left:15px;} .pt15{padding-top:15px;} .pr15{padding-right:15px;} .pb15{padding-bottom:15px;} .p20{padding:20px;} .pl20{padding-left:20px;} .pt20{padding-top:20px;} .pr20{padding-right:20px;} .pb20{padding-bottom:20px;} .p30{padding:30px;} .pl30{padding-left:30px;} .pt30{padding-top:30px;} .pr30{padding-right:30px;} .pb30{padding-bottom:30px;} /* border-color name rule: border(b)-position(l/r/t/b/d)-width(null/2)-style(null/sh)-color(first one letter/first two letter) |-> All colors are safe color*/ .bdc{border:1px solid #ccc;} .blc{border-left:1px solid #ccc;} .brc{border-right:1px solid #ccc;} .btc{border-top:1px solid #ccc;} .bbc{border-bottom:1px solid #ccc;} .bdd{border:1px solid #ddd;} .bld{border-left:1px solid #ddd;} .brd{border-right:1px solid #ddd;} .btd{border-top:1px solid #ddd;} .bbd{border-bottom:1px solid #ddd;} .bde{border:1px solid #eee;} .ble{border-left:1px solid #eee;} .bre{border-right:1px solid #eee;} .bte{border-top:1px solid #eee;} .bbe{border-bottom:1px solid #eee;} /* background-color name rule: bg - (key word/Hex color) |-> All colors are safe color */ .bgwh{background-color:#fff;} /* safe color */ .g0{color:#000;} .g3{color:#333;} .g6{color:#666;} .g9{color:#999;} .gc{color:#ccc;} .wh{color:white;} /* font-size */ .f0{font-size:0;} .f12{font-size:12px;} .f13{font-size:13px;} .f14{font-size:14px;} .f15{font-size:15px;} .f16{font-size:16px;} .f18{font-size:18px;} .f20{font-size:20px;} .f24{font-size:24px;} .f28{font-size:28px;} /* font-family */ .fa{font-family:Arial;} .ft{font-family:Tahoma;} .fv{font-family:Verdana;} .fs{font-family:Simsun;} .fl{font-family:'Lucida Console';} .fw{font-family:'Microsoft Yahei';} /* font-style */ .n{font-weight:normal; font-style:normal; white-space: normal;} .b{font-weight:bold;} .i{font-style:italic;} /* text-align */ .tc{text-align:center;} .tr{text-align:right;} .tl{text-align:left;} .tj{text-align:justify;} /* text-decoration */ .tdl{text-decoration:underline;} .tdn,.tdn:hover,.tdn a:hover,a.tdl:hover{text-decoration:none;} /* letter-spacing */ .lt-1{letter-spacing:-1px;} .lt0{letter-spacing:0;} .lt1{letter-spacing:1px;} /* white-space */ .nowrap{white-space:nowrap;} /* word-wrap */ .bk{word-wrap:break-word;} /* vertical-align */ .vm{vertical-align:middle;} .vtb{vertical-align:text-bottom;} .vb{vertical-align:bottom;} .vt{vertical-align:top;} .v-1{vertical-align:-1px;} .v-2{vertical-align:-2px;} .v-3{vertical-align:-3px;} .v-4{vertical-align:-4px;} .v-5{vertical-align:-5px;} /* float */ .l{float:left;} .r{float:right;} /* clear */ .cl{clear:both;} /* position */ .rel{position:relative;} .abs{position:absolute;} /*z-index*/ .zx1{z-index:1;} .zx2{z-index:2;} /* cursor */ .poi{cursor:pointer;} .def{cursor:default;} /* overflow */ .ovh{overflow:hidden;} .ova{overflow:auto;} /* visibility */ .vh{visibility:hidden;} .vv{visibility:visible;} /* opacity */ .opa0{opacity:0; filer:alpha(opacity=0);} /* zoom */ .z{*zoom:1;} /* ------------------- multiply CSS ------------------ */ /* 块状元素水平居中 */ .auto{margin-left:auto; margin-right:auto;} /* 清除浮动*/ .fix{*zoom:1;} .fix:after{display:table; content:''; clear:both;} /*清除浮动*/ .clearfix:after{ display:block;height:0;content:'.';clear:both;overflow:hidden; } /* 基于display:table-cell的自适应布局 */ .cell{display:table-cell; *display:inline-block; width:2000px; *width:auto;} /* 双栏自适应cell部分连续英文字符换行 */ .cell2{overflow:hidden; _display:inline-block;} /* 单行文字溢出虚点显 示*/ .ell{text-overflow:ellipsis; white-space:nowrap; overflow:hidden;} /* css3过渡动画效果 */ .trans{ -webkit-transition:all .15s; transition:all .15s; } /* 大小不定元素垂直居中 */ .dib_vm{display:inline-block; width:0; height:100%; vertical-align:middle;} /* 加载中背景图片 - 如果您使用该CSS小库，务必修改此图片地址 */ .loading{background:url(about:blank) no-repeat center;} /* 无框文本框文本域 */ .bd_none{border:0; outline:none;} /* 绝对定位隐藏 */ .abs_out{position:absolute; left:-999em; top:-999em;} .abs_clip{position:absolute; clip:rect(0 0 0 0);} /* 按钮禁用 */ .disabled{outline:0 none; cursor:default!important; opacity:.4; filer:alpha(opacity=40); -ms-pointer-events:none; pointer-events:none;} /*inline-block与float等宽列表*/ .inline_box{font-size:1em; letter-spacing:-.25em; font-family:Arial;} .inline_two, .inline_three, .inline_four, .inline_five, .inline_six, .inline_any{display:inline-block; *display:inline; letter-spacing:0; vertical-align:top; *zoom:1;} .float_two, .float_three, .float_four, .float_five, .float_six{float:left;} .inline_two, .float_two{width:50%; *width:49.9%;} .inline_three, .float_three{width:33.33333%; *width:33.3%;} .inline_four, .float_four{width:25%; *width:24.9%;} .inline_five, .float_five{width:20%; *width:19.9%;} .inline_six, .float_six{width:16.66666%; *width:16.6%;} .inline_fix{display:inline-block; width:100%; height:0; overflow:hidden;} body{font-size: 14px;font-family: '微软雅黑';background-color: rgb(247,247,247);height:100%;} .w1000{width:80%;margin:0 auto;} .header.contrainer{background-color: #ccc;height:60px;line-height: 60px;} .header a{display:block;color:#000;text-decoration: none} .body{line-height: 40px;} .body .header{font-size: 20px;margin: 50px 0 100px;} .event_wrap{position:relative;} .event_wrap .middle_line{position:absolute;left:50%;top:0;width:8px;margin-left: 0px;border-left: 1px solid #000;height:100%;} .event_wrap .middle_line i{display:block;height:3.31%;border-bottom: 1px solid #000;width:60%;} .event_wrap .middle_line i.first{padding-top: 75px;} .event_wrap .middle_line i.last{margin-bottom: 25px;} .big_squre{margin-left:-30px;left:50%;display:block;position:absolute;top:8px;width:60px;height:60px;background-color: #6e6e6e;border-radius: 10px;transform:rotate(45deg);-webkit-transform:rotate(45deg);} .big_squre i{transform:rotate(-45deg);-webkit-transform: rotate(-45deg);display: block;position: absolute;left: 11px;color: #fff;top: 11px;font-size: 18px} .small_squire{position:absolute;top:11px;display:block;height:12px;width:12px;padding:3px;border-radius: 3px;transform:rotate(45deg);-webkit-transform:rotate(45deg);background-color: #6e6e6e;} .small_squire i{display:block;width:12px;height:12px;background-color: #fff;border-radius: 3px;} .event_wrap .list{height:300px;position:relative;padding-top: 75px;} .aActiveWid{width:50% !important;filter:alpha(opacity=100) !important;opacity:1 !important;} .event_wrap .list:last-child{height:275px;} .event_wrap .list .ev_text{position:absolute;opacity:0.1;filter:alpha(opacity=10);width:0px;overflow: hidden; -o-transition: all 3s ease; -moz-transition: all 3s ease; -ms-transition: all 3s ease; -webkit-transition: all 3s ease; transition: all 3s ease;} .event_wrap .list_right .ev_text_odd,.event_wrap .list_left .ev_text_event{text-align: left;left:50%;} .event_wrap .list_right .ev_text_event,.event_wrap .list_left .ev_text_odd{text-align: right;left:initial;right:50%;} .event_wrap .list .ev_t1{top: 55px;} .event_wrap .list .ev_t2{top: 80px;} .event_wrap .list .ev_t3{top: 105px;} .event_wrap .list .ev_t4{top: 130px;} .event_wrap .list .ev_t5{top: 155px;} .event_wrap .list .ev_t6{top: 180px;} .event_wrap .list .ev_t7{top: 205px;} .event_wrap .list .ev_t8{top: 230px;} .event_wrap .list .ev_t9{top: 255px;} .event_wrap .list .ev_t10{top: 280px;} .event_wrap .list .ev_t11{top: 305px;} .event_wrap .list .ev_t12{top: 330px;} .event_wrap .list_right .small_squire,.event_wrap .list_left .ev_text_event .small_squire{left:4px;} .event_wrap .list_left .small_squire,.event_wrap .list_right .ev_text_event .small_squire{right:3px;left:inherit;} .event_wrap .list .small_line,.event_wrap .list_left .ev_text_event .samll_line{display: inline-block;position: absolute;height: 1px;overflow: hidden;border-top: 1px solid #000;top: 19px;left: 24px;width: 13%;} .event_wrap .list_left .ev_text_odd .small_line,.event_wrap .list_right .ev_text_event .small_line{right:23px;left:initial;} .ev_text h3{font-size: 18px;padding-left: 20%;width:80%} .ev_text p{line-height: 20px;padding-left:20%;width:80%;height:40px;overflow: hidden;} .list_right .ev_text_event h3,.list_right .ev_text_event p,.list_left .ev_text_odd h3,.list_left .ev_text_odd p{padding-right: 100px;padding-left: inherit}"},{"title":"","date":"2021-02-04T11:08:17.254Z","updated":"2021-02-04T11:08:17.254Z","comments":true,"path":"love/love/js/jquery.eventFlow.js","permalink":"https://hujiahao.top/love/love/js/jquery.eventFlow.js","excerpt":"","text":";(function($,window,document,undefined){ var pluginName = 'eventFlow', defaults ={}; function EventFlow(element,options){ this.init(element,options); } EventFlow.prototype = { init : function(element,options){ this.spliceHtml(element,options); var $text = $('.event_wrap .list .ev_text'); var point = []; $text.each(function(index, el) { point.push($(this).offset().top) }); $(window).scroll(function(event) { var s = $(this).scrollTop(); for(var i =0;i point[i] ){ $($text[i]).addClass('aActiveWid'); }else{ $($text[i]).removeClass('aActiveWid') } } }); }, spliceHtml :function(element,options){ var $element = element; var $middleLine = $element.find('.middle_line'); var middleLineI = ''; var list = '' for(var i = 0;i"},{"title":"","date":"2021-01-25T13:54:51.903Z","updated":"2021-01-25T13:54:51.903Z","comments":true,"path":"love/新建文件夹/css/time-axis.css","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/css/time-axis.css","excerpt":"","text":"body{ margin: 0; padding: 0; } .main{ width: 90%; margin: 30px auto; } .time-axis{ margin: 0; padding: 0; position: relative; } .time-axis:before{ content: ''; position: absolute; left: 130; top: 15px; width: 1px; height: 100%; background-color: #E4E4E4; } .time-axis-item{ list-style: none; padding-left: 150px; position: relative; line-height: 30px; padding-top: 6px; font-size: 14px; color: #141414; } .time-axis-achievement{ position: absolute; top: 20%; left: 7%; color:#00c4b6; font-size: 12px; } .time-axis-date{ position: absolute; left: 0; top: 0; width: 120px; color: #1296db; text-align: center; padding-top: 6px; } .time-axis-date span{ position: absolute; right: -18px; top: 41%; display: block; width: 13px; height: 13px; border: 1px solid #ccc; border-radius: 100%; background-color: #fff; } .time-axis-date span:hover{ } .time-axis-date span:after{ content: ''; position: absolute; left: 0; top: 0; right: 0; bottom: 0; width: 7px; height: 7px; margin: auto; background-color: #ccc; border: 1px solid #ccc; border-radius: 100%; } .time-axis-item:first-child .time-axis-date span{ border-color: #48BEB2; } .time-axis-item:first-child .time-axis-date span:after{ background-color: #48BEB2; border-color: #48BEB2; } .time-title{ font-size:18px; font-weight: 500; margin-left: 90px; }"},{"title":"","date":"2021-01-27T02:51:00.129Z","updated":"2021-01-27T02:51:00.129Z","comments":true,"path":"love/新建文件夹/jiaoben7691/index.html","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/index.html","excerpt":"","text":"点我有惊喜"},{"title":"","date":"2021-02-05T05:42:02.108Z","updated":"2021-02-05T05:42:02.108Z","comments":true,"path":"love1/todo/css/LoveTodos.css","permalink":"https://hujiahao.top/love1/todo/css/LoveTodos.css","excerpt":"","text":"*{ margin: 0; padding: 0; } .love-desc{ padding: 10px; border: 1px solid #03a9f4; border-radius: .4rem; background-color: #03a9f433; } .return{ float: right; } .love-todos{ margin-top: 30px; margin-left: 10px; font-size: 14px; color: #000; font-weight: 330; line-height: 30px; } .love-todos input{ margin-right: 10px; width: 15px; height: 15px; margin-right: 8px; }"},{"title":"","date":"2021-01-27T02:51:58.904Z","updated":"2021-01-27T02:51:58.904Z","comments":true,"path":"love/新建文件夹/jiaoben7691/css/style.css","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/css/style.css","excerpt":"","text":"@import url(\"https://fonts.googleapis.com/css?family=Cute+Font&display=swap\"); html, body { width: 100%; height: 100vw; margin: 0; } body { color: #333; font-family: \"Cute Font\", cursive; background: #dedfdf; overflow: hidden; } * { margin: 0; padding: 0; box-sizing: border-box; -webkit-box-sizing: border-box; } *:before, *:after { content: \"\"; position: absolute; } .container { margin: auto; } .album { -webkit-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-transition: 1s; transition: 1s; margin: auto; width: 600px; height: 700px; -webkit-transform: scale(0.5); transform: scale(0.5); } .album--open { -webkit-transform: translate(65px, 0) rotateX(35deg) rotateY(0deg) rotateZ(35deg) scale(0.5); transform: translate(65px, 0) rotateX(35deg) rotateY(0deg) rotateZ(35deg) scale(0.5); } .album__paper { position: absolute; top: 0; left: 0; width: 100%; height: 100%; -webkit-transition: 1s; transition: 1s; -webkit-transform-origin: 0 50%; transform-origin: 0 50%; -webkit-transform-style: preserve-3d; transform-style: preserve-3d; } .album__paper:not(.first) .album__page { background: #f1f0f0; background-size: 100% 1.5em; } .album__paper:not(.first) .back { background: #d4d3d3; } .album__paper:nth-of-type(1) .back { background: #0095a3; } .album__paper:nth-of-type(1) .album__page { background: #0095a3; } .album__paper.open { box-shadow: 0 1em 0 0 #aaa; -webkit-transform: rotateX(0) rotateY(-180deg) rotateZ(0); transform: rotateX(0) rotateY(-180deg) rotateZ(0); } .album__paper .album__page.front { transition: 1s; -webkit-transition: 1s; transform-origin: 0 50%; -webkit-transform-origin: 0 50%; -webkit-backface-visibility: hidden; backface-visibility: hidden; z-index: 2; } .album__paper .back { transition: 1s; -webkit-transition: 1s; transform-origin: 0 50%; -webkit-transform-origin: 0 50%; background: #e1e1e1; } .album__top-title { font-size: 40px; line-height: 0.8; padding: 20px; text-align: center; margin-top: 20px; } .album__page { width: 100%; height: 100%; position: absolute; -webkit-transform: translateZ(0px); transform: translateZ(0px); } .album__back { width: 3em; height: 700px; background: #007e8a; position: absolute; left: -3em; top: 0; transform-origin: 100% 100%; -webkit-transform-origin: 100% 100%; transform: rotateY(-90deg) rotateX(0deg); -webkit-transform: rotateY(-90deg) rotateX(0deg); } .album__shadow { position: absolute; top: 0; left: 0; width: 600px; height: 700px; background: transparent; transform: translateZ(-3em); -webkit-transform: translateZ(-3em); box-shadow: 1em 1em 0px 0px #aaa; z-index: 1; } .album__bottom { width: 600px; height: 3em; background: #d4d3d3; position: absolute; bottom: 0; left: 0; transform-origin: 100% 100%; -webkit-transform-origin: 100% 100%; transform: rotateX(90deg); -webkit-transform: rotateX(90deg); } .cat-mark { position: relative; width: 200px; height: 170px; background: #333; border-radius: 60% 60% 90px 90px; margin: 150px auto auto; } .cat-mark:before, .cat-mark:after { top: -25px; width: 0; height: 0; border-bottom: 80px solid #333; border-right: 50px solid transparent; border-left: 50px solid transparent; border-radius: 33px; } .cat-mark:before { right: -20px; transform: rotate(32deg); -webkit-transform: rotate(32deg); } .cat-mark:after { left: -20px; transform: rotate(-32deg); -webkit-transform: rotate(-32deg); } .top-content { height: 100%; display: -webkit-box; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-flow: column; } .content { height: 100%; grid-template-columns: 50% 50%; grid-template-rows: 100px auto; } .content__title { grid-row: 1; grid-column: 1 / 3; font-size: 50px; line-height: 0.8; padding: 20px; box-sizing: border-box; } .content__img1 { display: -webkit-box; display: flex; -webkit-box-align: center; align-items: center; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-flow: column; box-sizing: border-box; } .content__img1 img { margin: 0 auto; width: 90%; height: 100%; height: 580px; border: 10px solid #fff; box-sizing: border-box; } .content__text { width: 100%; padding: 30px; font-size: 30px; box-sizing: border-box; } @media screen and (max-width: 768px) { body { overflow: visible; } }"},{"title":"","date":"2021-01-27T02:47:10.433Z","updated":"2021-01-27T02:47:10.433Z","comments":true,"path":"love/新建文件夹/jiaoben7691/js/script.js","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/js/script.js","excerpt":"","text":"new Vue({ el: '#app', data() { return { isOpenedTop: false, items: [ { img1: \"img/1.jpg\", title: \"文❤️豪\", isOpen: false }, { img1: \"img/2.jpg\", title: \"文❤️豪\", isOpen: false }, { img1: \"img/3.jpg\", title: \"文❤️豪\", isOpen: false }, { img1: \"img/4.jpg\", title: \"文❤️豪\", isOpen: false }, ] }; }, methods: { topOpen() { this.isOpenedTop = !this.isOpenedTop; }, open(idx, isOpen) { if (this.isOpenedTop) { this.items[idx].isOpen = !isOpen; } }, reset() { this.items.forEach(item => (item.isOpen = false)); this.isOpenedTop = false; } } })"},{"title":"","date":"2021-01-27T02:50:54.152Z","updated":"2021-01-27T02:50:54.152Z","comments":true,"path":"love/新建文件夹/新建文件夹/jiaoben7691/index.html","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/index.html","excerpt":"","text":"JS点击书本相册翻页代码 - 站长素材 Album NaN"},{"title":"","date":"2021-01-27T02:38:13.925Z","updated":"2021-01-27T02:38:13.925Z","comments":true,"path":"love/新建文件夹/新建文件夹/jiaoben7691/说明.html","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/%E8%AF%B4%E6%98%8E.html","excerpt":"","text":"�й�վ��վ�����ļ�˵�� A { FONT-SIZE: 12px; COLOR: #000000; TEXT-DECORATION: none } A:hover { COLOR: #ffcc00 } A.blue { COLOR: darkblue } body, p, td { FONT-SIZE: 12px } �� �� &nbsp;���й�վ��վ�����ļ�˵�� &nbsp;&nbsp; �����صĸ��ļ��������й�վ��վ(www.chinaz.com) ����������Ǵ�www.chinaz.com���صģ�������ϵ���Ǿٱ�������վ��E-mail: sc&#064;chinaz.com &nbsp;&nbsp; ʹ��ǰ�������Ķ����������������ʹ�ñ�վ�ṩ���ļ��� &nbsp;&nbsp; 1) ��վ����֤���ṩ���������������ԺͰ�ȫ�ԡ� &nbsp;&nbsp; 2) ����ʹ��ǰ�鶾 (��Ҳ����ʹ������������Դ������ע���) �� &nbsp;&nbsp; 3) �ɱ�վ�ṩ�ĳ����������վ������������غ���ı�վ�Ų����� &nbsp;&nbsp; 4) ת�ر�վ�ṩ����Դ����ɾ����˵���ļ��� &nbsp;&nbsp; 5) ��վ�ṩ�ĳ����Ϊ�����Ѽ�������ó����漰���ֺ������İ�Ȩ������д��֪ͨ���ǡ�E-mail: sc&#064;chinaz.com &nbsp;&nbsp; ���κ�����ɵ�վ����̳(chinaz.com)�������������Եõ�����ļ���֧�֣� &nbsp;&nbsp; ��ϵ����Ա: sc&#064;chinaz.com &nbsp;&nbsp; ���Ͷ��: ads&#064;chinaz.com&nbsp;&nbsp;&nbsp;�й�վ��վ��Ϊ�й���վ�ṩ���������� &nbsp; C H I N A Z . C O M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Powered by CHINAZ.STUDIO"},{"title":"","date":"2021-01-27T02:38:13.886Z","updated":"2021-01-27T02:38:13.886Z","comments":true,"path":"love/新建文件夹/新建文件夹/jiaoben7691/css/style.css","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/css/style.css","excerpt":"","text":"@import url(\"https://fonts.googleapis.com/css?family=Cute+Font&display=swap\"); html, body { width: 100%; height: 100vw; margin: 0; } body { color: #333; font-family: \"Cute Font\", cursive; background: #dedfdf; overflow: hidden; } * { margin: 0; padding: 0; box-sizing: border-box; -webkit-box-sizing: border-box; } *:before, *:after { content: \"\"; position: absolute; } .container { margin: auto; } .album { -webkit-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-transition: 1s; transition: 1s; margin: auto; width: 600px; height: 700px; -webkit-transform: scale(0.5); transform: scale(0.5); } .album--open { -webkit-transform: translate(65px, 0) rotateX(35deg) rotateY(0deg) rotateZ(35deg) scale(0.5); transform: translate(65px, 0) rotateX(35deg) rotateY(0deg) rotateZ(35deg) scale(0.5); } .album__paper { position: absolute; top: 0; left: 0; width: 100%; height: 100%; -webkit-transition: 1s; transition: 1s; -webkit-transform-origin: 0 50%; transform-origin: 0 50%; -webkit-transform-style: preserve-3d; transform-style: preserve-3d; } .album__paper:not(.first) .album__page { background: #f1f0f0; background-size: 100% 1.5em; } .album__paper:not(.first) .back { background: #d4d3d3; } .album__paper:nth-of-type(1) .back { background: #0095a3; } .album__paper:nth-of-type(1) .album__page { background: #0095a3; } .album__paper.open { box-shadow: 0 1em 0 0 #aaa; -webkit-transform: rotateX(0) rotateY(-180deg) rotateZ(0); transform: rotateX(0) rotateY(-180deg) rotateZ(0); } .album__paper .album__page.front { transition: 1s; -webkit-transition: 1s; transform-origin: 0 50%; -webkit-transform-origin: 0 50%; -webkit-backface-visibility: hidden; backface-visibility: hidden; z-index: 2; } .album__paper .back { transition: 1s; -webkit-transition: 1s; transform-origin: 0 50%; -webkit-transform-origin: 0 50%; background: #e1e1e1; } .album__top-title { font-size: 100px; line-height: 0.8; padding: 20px; } .album__page { width: 100%; height: 100%; position: absolute; -webkit-transform: translateZ(0px); transform: translateZ(0px); } .album__back { width: 3em; height: 700px; background: #007e8a; position: absolute; left: -3em; top: 0; transform-origin: 100% 100%; -webkit-transform-origin: 100% 100%; transform: rotateY(-90deg) rotateX(0deg); -webkit-transform: rotateY(-90deg) rotateX(0deg); } .album__shadow { position: absolute; top: 0; left: 0; width: 600px; height: 700px; background: transparent; transform: translateZ(-3em); -webkit-transform: translateZ(-3em); box-shadow: 1em 1em 0px 0px #aaa; z-index: 1; } .album__bottom { width: 600px; height: 3em; background: #d4d3d3; position: absolute; bottom: 0; left: 0; transform-origin: 100% 100%; -webkit-transform-origin: 100% 100%; transform: rotateX(90deg); -webkit-transform: rotateX(90deg); } .cat-mark { position: relative; width: 200px; height: 170px; background: #333; border-radius: 60% 60% 90px 90px; margin: 150px auto auto; } .cat-mark:before, .cat-mark:after { top: -25px; width: 0; height: 0; border-bottom: 80px solid #333; border-right: 50px solid transparent; border-left: 50px solid transparent; border-radius: 33px; } .cat-mark:before { right: -20px; transform: rotate(32deg); -webkit-transform: rotate(32deg); } .cat-mark:after { left: -20px; transform: rotate(-32deg); -webkit-transform: rotate(-32deg); } .top-content { height: 100%; display: -webkit-box; display: flex; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-flow: column; } .content { height: 100%; display: grid; grid-template-columns: 50% 50%; grid-template-rows: 100px auto; } .content__title { grid-row: 1; grid-column: 1 / 3; font-size: 100px; line-height: 0.8; padding: 20px; box-sizing: border-box; } .content__img1 { grid-row: 2 / 4; grid-column: 1 / 2; display: -webkit-box; display: flex; -webkit-box-align: center; align-items: center; -webkit-box-orient: vertical; -webkit-box-direction: normal; flex-flow: column; box-sizing: border-box; } .content__img1 img { margin: auto; width: 90%; border: 10px solid #fff; box-sizing: border-box; } .content__img2 { grid-row: 3 / 4; grid-column: 2 / 4; display: -webkit-box; display: flex; -webkit-box-align: center; align-items: center; box-sizing: border-box; } .content__img2 img { margin: auto; width: 80%; border: 10px solid #fff; box-sizing: border-box; } .content__img3 { grid-row: 2; grid-column: 2; display: -webkit-box; display: flex; -webkit-box-align: center; align-items: center; box-sizing: border-box; } .content__img3 img { margin: auto; width: 60%; border: 10px solid #fff; box-sizing: border-box; } .content__text { width: 100%; padding: 30px; font-size: 30px; box-sizing: border-box; } @media screen and (max-width: 768px) { body { overflow: visible; } }"},{"title":"","date":"2021-01-27T02:38:13.918Z","updated":"2021-01-27T02:38:13.918Z","comments":true,"path":"love/新建文件夹/新建文件夹/jiaoben7691/js/script.js","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/js/script.js","excerpt":"","text":"new Vue({ el: '#app', data() { return { isOpenedTop: true, items: [ { img1: \"img/1.jpg\", img2: \"img/2.jpg\", img3: \"img/3.jpg\", title: \"NEKO\", isOpen: false }, { img1: \"img/4.jpg\", img2: \"img/5.jpg\", img3: \"img/6.jpg\", title: \"NYAN\", isOpen: false }, { img1: \"img/7.jpg\", img2: \"img/8.jpg\", img3: \"img/9.jpg\", title: \"NEKO\", isOpen: false }, { img1: \"img/10.jpg\", img2: \"img/11.jpg\", img3: \"img/12.jpg\", title: \"NYANNYAN\", isOpen: false }, { img1: \"img/13.jpg\", img2: \"img/14.jpg\", img3: \"img/15.jpg\", title: \"NEKONEKO\", isOpen: false } ] }; }, methods: { topOpen() { this.isOpenedTop = !this.isOpenedTop; }, open(idx, isOpen) { if (this.isOpenedTop) { this.items[idx].isOpen = !isOpen; } }, reset() { this.items.forEach(item => (item.isOpen = false)); this.isOpenedTop = false; } } })"},{"title":"","date":"2021-02-04T11:51:31.713Z","updated":"2021-02-04T11:51:31.713Z","comments":true,"path":"love1/js/jquery.js","permalink":"https://hujiahao.top/love1/js/jquery.js","excerpt":"","text":"/*! * jQuery JavaScript Library v1.4.2 * http://jquery.com/ * * Copyright 2010, John Resig * Dual licensed under the MIT or GPL Version 2 licenses. * http://jquery.org/license * * Includes Sizzle.js * http://sizzlejs.com/ * Copyright 2010, The Dojo Foundation * Released under the MIT, BSD, and GPL Licenses. * * Date: Sat Feb 13 22:33:48 2010 -0500 */ (function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll(\"left\")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:\"script\"}):c.globalEval(b.text||b.textContent||b.innerHTML||\"\");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b===\"object\"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o"},{"title":"","date":"2021-02-04T04:27:03.171Z","updated":"2021-02-04T04:27:03.171Z","comments":true,"path":"love/todo/js/jquery-1.7.2.min.js","permalink":"https://hujiahao.top/love/todo/js/jquery-1.7.2.min.js","excerpt":"","text":"/*! jQuery v1.7.2 jquery.com | jquery.org/license */ (function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cu(a){if(!cj[a]){var b=c.body,d=f(\"\").appendTo(b),e=d.css(\"display\");d.remove();if(e===\"none\"||e===\"\"){ck||(ck=c.createElement(\"iframe\"),ck.frameBorder=ck.width=ck.height=0),b.appendChild(ck);if(!cl||!ck.createElement)cl=(ck.contentWindow||ck.contentDocument).document,cl.write((f.support.boxModel?\"\":\"\")+\"\"),cl.close();d=cl.createElement(a),cl.body.appendChild(d),e=f.css(d,\"display\"),b.removeChild(ck)}cj[a]=e}return cj[a]}function ct(a,b){var c={};f.each(cp.concat.apply([],cp.slice(0,b)),function(){c[this]=a});return c}function cs(){cq=b}function cr(){setTimeout(cs,0);return cq=f.now()}function ci(){try{return new a.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(b){}}function ch(){try{return new a.XMLHttpRequest}catch(b){}}function cb(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g"},{"title":"","date":"2021-02-04T11:08:17.260Z","updated":"2021-02-04T11:08:17.260Z","comments":true,"path":"love/love/js/jquery.min.js","permalink":"https://hujiahao.top/love/love/js/jquery.min.js","excerpt":"","text":"/*! jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license //@ sourceMappingURL=jquery.min.map */ (function(e,t){var n,r,i=typeof t,o=e.location,a=e.document,s=a.documentElement,l=e.jQuery,u=e.$,c={},p=[],f=\"1.10.2\",d=p.concat,h=p.push,g=p.slice,m=p.indexOf,y=c.toString,v=c.hasOwnProperty,b=f.trim,x=function(e,t){return new x.fn.init(e,t,r)},w=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,T=/\\S+/g,C=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,N=/^(?:\\s*()[^>]*|#([\\w-]*))$/,k=/^(?:|)$/,E=/^[\\],:{}\\s]*$/,S=/(?:^|:|,)(?:\\s*\\[)+/g,A=/\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,j=/\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,D=/^-ms-/,L=/-([\\da-z])/gi,H=function(e,t){return t.toUpperCase()},q=function(e){(a.addEventListener||\"load\"===e.type||\"complete\"===a.readyState)&&(_(),x.ready())},_=function(){a.addEventListener?(a.removeEventListener(\"DOMContentLoaded\",q,!1),e.removeEventListener(\"load\",q,!1)):(a.detachEvent(\"onreadystatechange\",q),e.detachEvent(\"onload\",q))};x.fn=x.prototype={jquery:f,constructor:x,init:function(e,n,r){var i,o;if(!e)return this;if(\"string\"==typeof e){if(i=\"\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof x?n[0]:n,x.merge(this,x.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:a,!0)),k.test(i[1])&&x.isPlainObject(n))for(i in n)x.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(o=a.getElementById(i[2]),o&&o.parentNode){if(o.id!==i[2])return r.find(e);this.length=1,this[0]=o}return this.context=a,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:\"\",length:0,toArray:function(){return g.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(g.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for(\"boolean\"==typeof s&&(c=s,s=arguments[1]||{},l=2),\"object\"==typeof s||x.isFunction(s)||(s={}),u===l&&(s=this,--l);u>l;l++)if(null!=(o=arguments[l]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(x.isPlainObject(r)||(n=x.isArray(r)))?(n?(n=!1,a=e&&x.isArray(e)?e:[]):a=e&&x.isPlainObject(e)?e:{},s[i]=x.extend(c,a,r)):r!==t&&(s[i]=r));return s},x.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=l),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){if(e===!0?!--x.readyWait:!x.isReady){if(!a.body)return setTimeout(x.ready);x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(a,[x]),x.fn.trigger&&x(a).trigger(\"ready\").off(\"ready\"))}},isFunction:function(e){return\"function\"===x.type(e)},isArray:Array.isArray||function(e){return\"array\"===x.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?c[y.call(e)]||\"object\":typeof e},isPlainObject:function(e){var n;if(!e||\"object\"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!v.call(e,\"constructor\")&&!v.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(r){return!1}if(x.support.ownLast)for(n in e)return v.call(e,n);for(n in e);return n===t||v.call(e,n)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||a;var r=k.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:\"string\"==typeof n&&(n=x.trim(n),n&&E.test(n.replace(A,\"@\").replace(j,\"]\").replace(S,\"\")))?Function(\"return \"+n)():(x.error(\"Invalid JSON: \"+n),t)},parseXML:function(n){var r,i;if(!n||\"string\"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,\"text/xml\")):(r=new ActiveXObject(\"Microsoft.XMLDOM\"),r.async=\"false\",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName(\"parsererror\").length||x.error(\"Invalid XML: \"+n),r},noop:function(){},globalEval:function(t){t&&x.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(D,\"ms-\").replace(L,H)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:b&&!b.call(\"\\ufeff\\u00a0\")?function(e){return null==e?\"\":b.call(e)}:function(e){return null==e?\"\":(e+\"\").replace(C,\"\")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?x.merge(n,\"string\"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(m)return m.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if(\"number\"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return d.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return\"string\"==typeof n&&(o=e[n],n=e,e=o),x.isFunction(e)?(r=g.call(arguments,2),i=function(){return e.apply(n||this,r.concat(g.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):t},access:function(e,n,r,i,o,a,s){var l=0,u=e.length,c=null==r;if(\"object\"===x.type(r)){o=!0;for(l in r)x.access(e,n,l,r[l],!0,a,s)}else if(i!==t&&(o=!0,x.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(x(e),n)})),n))for(;u>l;l++)n(e[l],r,s?i:i.call(e[l],l,n(e[l],r)));return o?e:c?n.call(e):u?n(e[0],r):a},now:function(){return(new Date).getTime()},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),x.ready.promise=function(t){if(!n)if(n=x.Deferred(),\"complete\"===a.readyState)setTimeout(x.ready);else if(a.addEventListener)a.addEventListener(\"DOMContentLoaded\",q,!1),e.addEventListener(\"load\",q,!1);else{a.attachEvent(\"onreadystatechange\",q),e.attachEvent(\"onload\",q);var r=!1;try{r=null==e.frameElement&&a.documentElement}catch(i){}r&&r.doScroll&&function o(){if(!x.isReady){try{r.doScroll(\"left\")}catch(e){return setTimeout(o,50)}_(),x.ready()}}()}return n.promise(t)},x.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){c[\"[object \"+t+\"]\"]=t.toLowerCase()});function M(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}r=x(a),function(e,t){var n,r,i,o,a,s,l,u,c,p,f,d,h,g,m,y,v,b=\"sizzle\"+-new Date,w=e.document,T=0,C=0,N=st(),k=st(),E=st(),S=!1,A=function(e,t){return e===t?(S=!0,0):0},j=typeof t,D=1"},{"title":"","date":"2021-01-25T06:17:35.318Z","updated":"2021-01-25T06:17:35.318Z","comments":true,"path":"love/新建文件夹/js/jquery-1.7.2.min.js","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/js/jquery-1.7.2.min.js","excerpt":"","text":"/*! jQuery v1.7.2 jquery.com | jquery.org/license */ (function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cu(a){if(!cj[a]){var b=c.body,d=f(\"\").appendTo(b),e=d.css(\"display\");d.remove();if(e===\"none\"||e===\"\"){ck||(ck=c.createElement(\"iframe\"),ck.frameBorder=ck.width=ck.height=0),b.appendChild(ck);if(!cl||!ck.createElement)cl=(ck.contentWindow||ck.contentDocument).document,cl.write((f.support.boxModel?\"\":\"\")+\"\"),cl.close();d=cl.createElement(a),cl.body.appendChild(d),e=f.css(d,\"display\"),b.removeChild(ck)}cj[a]=e}return cj[a]}function ct(a,b){var c={};f.each(cp.concat.apply([],cp.slice(0,b)),function(){c[this]=a});return c}function cs(){cq=b}function cr(){setTimeout(cs,0);return cq=f.now()}function ci(){try{return new a.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(b){}}function ch(){try{return new a.XMLHttpRequest}catch(b){}}function cb(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g"},{"title":"","date":"2021-01-25T06:17:35.318Z","updated":"2021-01-25T06:17:35.318Z","comments":true,"path":"love1/todo/js/jquery-1.7.2.min.js","permalink":"https://hujiahao.top/love1/todo/js/jquery-1.7.2.min.js","excerpt":"","text":"/*! jQuery v1.7.2 jquery.com | jquery.org/license */ (function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cu(a){if(!cj[a]){var b=c.body,d=f(\"\").appendTo(b),e=d.css(\"display\");d.remove();if(e===\"none\"||e===\"\"){ck||(ck=c.createElement(\"iframe\"),ck.frameBorder=ck.width=ck.height=0),b.appendChild(ck);if(!cl||!ck.createElement)cl=(ck.contentWindow||ck.contentDocument).document,cl.write((f.support.boxModel?\"\":\"\")+\"\"),cl.close();d=cl.createElement(a),cl.body.appendChild(d),e=f.css(d,\"display\"),b.removeChild(ck)}cj[a]=e}return cj[a]}function ct(a,b){var c={};f.each(cp.concat.apply([],cp.slice(0,b)),function(){c[this]=a});return c}function cs(){cq=b}function cr(){setTimeout(cs,0);return cq=f.now()}function ci(){try{return new a.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(b){}}function ch(){try{return new a.XMLHttpRequest}catch(b){}}function cb(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g"},{"title":"","date":"2021-01-27T02:17:43.713Z","updated":"2021-01-27T02:17:43.713Z","comments":true,"path":"love/新建文件夹/jiaoben7691/js/vue.min.js","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/js/vue.min.js","excerpt":"","text":"/*! * Vue.js v2.6.11 * (c) 2014-2019 Evan You * Released under the MIT License. */ !function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=e||self).Vue=t()}(this,function(){\"use strict\";var e=Object.freeze({});function t(e){return null==e}function n(e){return null!=e}function r(e){return!0===e}function i(e){return\"string\"==typeof e||\"number\"==typeof e||\"symbol\"==typeof e||\"boolean\"==typeof e}function o(e){return null!==e&&\"object\"==typeof e}var a=Object.prototype.toString;function s(e){return\"[object Object]\"===a.call(e)}function c(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function u(e){return n(e)&&\"function\"==typeof e.then&&\"function\"==typeof e.catch}function l(e){return null==e?\"\":Array.isArray(e)||s(e)&&e.toString===a?JSON.stringify(e,null,2):String(e)}function f(e){var t=parseFloat(e);return isNaN(t)?e:t}function p(e,t){for(var n=Object.create(null),r=e.split(\",\"),i=0;i-1)return e.splice(n,1)}}var m=Object.prototype.hasOwnProperty;function y(e,t){return m.call(e,t)}function g(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var _=/-(\\w)/g,b=g(function(e){return e.replace(_,function(e,t){return t?t.toUpperCase():\"\"})}),$=g(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),w=/\\B([A-Z])/g,C=g(function(e){return e.replace(w,\"-$1\").toLowerCase()});var x=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function k(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function A(e,t){for(var n in t)e[n]=t[n];return e}function O(e){for(var t={},n=0;n0,G=(J&&J.indexOf(\"android\"),J&&/iphone|ipad|ipod|ios/.test(J)||\"ios\"===K),X=(J&&/chrome\\/\\d+/.test(J),J&&/phantomjs/.test(J),J&&J.match(/firefox\\/(\\d+)/)),Y={}.watch,Q=!1;if(z)try{var ee={};Object.defineProperty(ee,\"passive\",{get:function(){Q=!0}}),window.addEventListener(\"test-passive\",null,ee)}catch(e){}var te=function(){return void 0===B&&(B=!z&&!V&&\"undefined\"!=typeof global&&(global.process&&\"server\"===global.process.env.VUE_ENV)),B},ne=z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function re(e){return\"function\"==typeof e&&/native code/.test(e.toString())}var ie,oe=\"undefined\"!=typeof Symbol&&re(Symbol)&&\"undefined\"!=typeof Reflect&&re(Reflect.ownKeys);ie=\"undefined\"!=typeof Set&&re(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ae=S,se=0,ce=function(){this.id=se++,this.subs=[]};ce.prototype.addSub=function(e){this.subs.push(e)},ce.prototype.removeSub=function(e){h(this.subs,e)},ce.prototype.depend=function(){ce.target&&ce.target.addDep(this)},ce.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t"},{"title":"","date":"2021-01-27T02:38:13.919Z","updated":"2021-01-27T02:38:13.919Z","comments":true,"path":"love/新建文件夹/新建文件夹/jiaoben7691/js/vue.min.js","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/js/vue.min.js","excerpt":"","text":"/*! * Vue.js v2.6.11 * (c) 2014-2019 Evan You * Released under the MIT License. */ !function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=e||self).Vue=t()}(this,function(){\"use strict\";var e=Object.freeze({});function t(e){return null==e}function n(e){return null!=e}function r(e){return!0===e}function i(e){return\"string\"==typeof e||\"number\"==typeof e||\"symbol\"==typeof e||\"boolean\"==typeof e}function o(e){return null!==e&&\"object\"==typeof e}var a=Object.prototype.toString;function s(e){return\"[object Object]\"===a.call(e)}function c(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function u(e){return n(e)&&\"function\"==typeof e.then&&\"function\"==typeof e.catch}function l(e){return null==e?\"\":Array.isArray(e)||s(e)&&e.toString===a?JSON.stringify(e,null,2):String(e)}function f(e){var t=parseFloat(e);return isNaN(t)?e:t}function p(e,t){for(var n=Object.create(null),r=e.split(\",\"),i=0;i-1)return e.splice(n,1)}}var m=Object.prototype.hasOwnProperty;function y(e,t){return m.call(e,t)}function g(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var _=/-(\\w)/g,b=g(function(e){return e.replace(_,function(e,t){return t?t.toUpperCase():\"\"})}),$=g(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),w=/\\B([A-Z])/g,C=g(function(e){return e.replace(w,\"-$1\").toLowerCase()});var x=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function k(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function A(e,t){for(var n in t)e[n]=t[n];return e}function O(e){for(var t={},n=0;n0,G=(J&&J.indexOf(\"android\"),J&&/iphone|ipad|ipod|ios/.test(J)||\"ios\"===K),X=(J&&/chrome\\/\\d+/.test(J),J&&/phantomjs/.test(J),J&&J.match(/firefox\\/(\\d+)/)),Y={}.watch,Q=!1;if(z)try{var ee={};Object.defineProperty(ee,\"passive\",{get:function(){Q=!0}}),window.addEventListener(\"test-passive\",null,ee)}catch(e){}var te=function(){return void 0===B&&(B=!z&&!V&&\"undefined\"!=typeof global&&(global.process&&\"server\"===global.process.env.VUE_ENV)),B},ne=z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function re(e){return\"function\"==typeof e&&/native code/.test(e.toString())}var ie,oe=\"undefined\"!=typeof Symbol&&re(Symbol)&&\"undefined\"!=typeof Reflect&&re(Reflect.ownKeys);ie=\"undefined\"!=typeof Set&&re(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ae=S,se=0,ce=function(){this.id=se++,this.subs=[]};ce.prototype.addSub=function(e){this.subs.push(e)},ce.prototype.removeSub=function(e){h(this.subs,e)},ce.prototype.depend=function(){ce.target&&ce.target.addDep(this)},ce.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t"},{"title":"","date":"2021-01-27T02:38:13.923Z","updated":"2021-01-27T02:38:13.923Z","comments":true,"path":"love/新建文件夹/新建文件夹/jiaoben7691/js/vuetify.min.js","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/js/vuetify.min.js","excerpt":"","text":"/*! * Vuetify v2.3.0-beta.6 * Forged by John Leider * Released under the MIT License. */ !function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e(require(\"vue\")):\"function\"==typeof define&&define.amd?define([\"vue\"],e):\"object\"==typeof exports?exports.Vuetify=e(require(\"vue\")):t.Vuetify=e(t.Vue)}(\"undefined\"!=typeof self?self:this,function(t){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,\"a\",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p=\"/dist/\",i(i.s=96)}([function(e,i){e.exports=t},,function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){\"use strict\";i.r(e);var n={};i.r(n),i.d(n,\"linear\",function(){return lt}),i.d(n,\"easeInQuad\",function(){return ut}),i.d(n,\"easeOutQuad\",function(){return ct}),i.d(n,\"easeInOutQuad\",function(){return ht}),i.d(n,\"easeInCubic\",function(){return dt}),i.d(n,\"easeOutCubic\",function(){return pt}),i.d(n,\"easeInOutCubic\",function(){return ft}),i.d(n,\"easeInQuart\",function(){return vt}),i.d(n,\"easeOutQuart\",function(){return mt}),i.d(n,\"easeInOutQuart\",function(){return gt}),i.d(n,\"easeInQuint\",function(){return yt}),i.d(n,\"easeOutQuint\",function(){return bt}),i.d(n,\"easeInOutQuint\",function(){return St});var r={};i.r(r),i.d(r,\"VApp\",function(){return f}),i.d(r,\"VAppBar\",function(){return $i}),i.d(r,\"VAppBarNavIcon\",function(){return an}),i.d(r,\"VAlert\",function(){return hn}),i.d(r,\"VAutocomplete\",function(){return Bs}),i.d(r,\"VAvatar\",function(){return Wr}),i.d(r,\"VBadge\",function(){return Ms}),i.d(r,\"VBanner\",function(){return Vs}),i.d(r,\"VBottomNavigation\",function(){return Hs}),i.d(r,\"VBottomSheet\",function(){return Us}),i.d(r,\"VBreadcrumbs\",function(){return Js}),i.d(r,\"VBreadcrumbsItem\",function(){return Xs}),i.d(r,\"VBreadcrumbsDivider\",function(){return Zs}),i.d(r,\"VBtn\",function(){return sn}),i.d(r,\"VBtnToggle\",function(){return to}),i.d(r,\"VCalendar\",function(){return Ma}),i.d(r,\"VCalendarDaily\",function(){return Ea}),i.d(r,\"VCalendarWeekly\",function(){return Ia}),i.d(r,\"VCalendarMonthly\",function(){return Oa}),i.d(r,\"VCard\",function(){return Va}),i.d(r,\"VCardActions\",function(){return Pa}),i.d(r,\"VCardSubtitle\",function(){return ja}),i.d(r,\"VCardText\",function(){return Ha}),i.d(r,\"VCardTitle\",function(){return Fa}),i.d(r,\"VCarousel\",function(){return qa}),i.d(r,\"VCarouselItem\",function(){return Ka}),i.d(r,\"VCheckbox\",function(){return el}),i.d(r,\"VSimpleCheckbox\",function(){return mr}),i.d(r,\"VChip\",function(){return Fn}),i.d(r,\"VChipGroup\",function(){return ol}),i.d(r,\"VColorPicker\",function(){return Kl}),i.d(r,\"VColorPickerSwatches\",function(){return Xl}),i.d(r,\"VColorPickerCanvas\",function(){return wl}),i.d(r,\"VContent\",function(){return Jl}),i.d(r,\"VCombobox\",function(){return tu}),i.d(r,\"VCounter\",function(){return cs}),i.d(r,\"VData\",function(){return ru}),i.d(r,\"VDataIterator\",function(){return uu}),i.d(r,\"VDataFooter\",function(){return ou}),i.d(r,\"VDataTable\",function(){return Eu}),i.d(r,\"VEditDialog\",function(){return Du}),i.d(r,\"VTableOverflow\",function(){return Lu}),i.d(r,\"VDataTableHeader\",function(){return bu}),i.d(r,\"VSimpleTable\",function(){return $u}),i.d(r,\"VVirtualTable\",function(){return Mu}),i.d(r,\"VDatePicker\",function(){return cc}),i.d(r,\"VDatePickerTitle\",function(){return Pu}),i.d(r,\"VDatePickerHeader\",function(){return Yu}),i.d(r,\"VDatePickerDateTable\",function(){return Qu}),i.d(r,\"VDatePickerMonthTable\",function(){return tc}),i.d(r,\"VDatePickerYears\",function(){return ec}),i.d(r,\"VDialog\",function(){return Ys}),i.d(r,\"VDivider\",function(){return yr}),i.d(r,\"VExpansionPanels\",function(){return dc}),i.d(r,\"VExpansionPanel\",function(){return fc}),i.d(r,\"VExpansionPanelHeader\",function(){return gc}),i.d(r,\"VExpansionPanelContent\",function(){return vc}),i.d(r,\"VFileInput\",function(){return Cc}),i.d(r,\"VFooter\",function(){return $c}),i.d(r,\"VForm\",function(){return Oc}),i.d(r,\"VContainer\",function(){return Tc}),i.d(r,\"VCol\",function(){return jc}),i.d(r,\"VRow\",function(){return eh}),i.d(r,\"VSpacer\",function(){return ih}),i.d(r,\"VLayout\",function(){return nh}),i.d(r,\"VFlex\",function(){return rh}),i.d(r,\"VHover\",function(){return sh}),i.d(r,\"VIcon\",function(){return Ti}),i.d(r,\"VImg\",function(){return li}),i.d(r,\"VInput\",function(){return as}),i.d(r,\"VItem\",function(){return ah}),i.d(r,\"VItemGroup\",function(){return Hr}),i.d(r,\"VLabel\",function(){return ts}),i.d(r,\"VLazy\",function(){return uh}),i.d(r,\"VListItemActionText\",function(){return Ur}),i.d(r,\"VListItemContent\",function(){return qr}),i.d(r,\"VListItemTitle\",function(){return Xr}),i.d(r,\"VListItemSubtitle\",function(){return Zr}),i.d(r,\"VList\",function(){return _r}),i.d(r,\"VListGroup\",function(){return Ar}),i.d(r,\"VListItem\",function(){return kr}),i.d(r,\"VListItemAction\",function(){return $r}),i.d(r,\"VListItemAvatar\",function(){return Gr}),i.d(r,\"VListItemIcon\",function(){return Tr}),i.d(r,\"VListItemGroup\",function(){return Nr}),i.d(r,\"VMenu\",function(){return pr}),i.d(r,\"VMessages\",function(){return is}),i.d(r,\"VNavigationDrawer\",function(){return hh}),i.d(r,\"VOverflowBtn\",function(){return ph}),i.d(r,\"VOverlay\",function(){return Ns}),i.d(r,\"VPagination\",function(){return gh}),i.d(r,\"VSheet\",function(){return Re}),i.d(r,\"VParallax\",function(){return yh}),i.d(r,\"VPicker\",function(){return nc}),i.d(r,\"VProgressCircular\",function(){return Ei}),i.d(r,\"VProgressLinear\",function(){return fs}),i.d(r,\"VRadioGroup\",function(){return Sh}),i.d(r,\"VRadio\",function(){return wh}),i.d(r,\"VRangeSlider\",function(){return Oh}),i.d(r,\"VRating\",function(){return _h}),i.d(r,\"VResponsive\",function(){return Xe}),i.d(r,\"VSelect\",function(){return Is}),i.d(r,\"VSkeletonLoader\",function(){return Ah}),i.d(r,\"VSlider\",function(){return ll}),i.d(r,\"VSlideGroup\",function(){return rl}),i.d(r,\"VSlideItem\",function(){return Eh}),i.d(r,\"VSnackbar\",function(){return Dh}),i.d(r,\"VSparkline\",function(){return Yh}),i.d(r,\"VSpeedDial\",function(){return Gh}),i.d(r,\"VStepper\",function(){return qh}),i.d(r,\"VStepperContent\",function(){return Zh}),i.d(r,\"VStepperStep\",function(){return Xh}),i.d(r,\"VStepperHeader\",function(){return Kh}),i.d(r,\"VStepperItems\",function(){return Jh}),i.d(r,\"VSubheader\",function(){return xr}),i.d(r,\"VSwitch\",function(){return td}),i.d(r,\"VSystemBar\",function(){return id}),i.d(r,\"VTabs\",function(){return cd}),i.d(r,\"VTab\",function(){return dd}),i.d(r,\"VTabItem\",function(){return pd}),i.d(r,\"VTabsItems\",function(){return ad}),i.d(r,\"VTabsSlider\",function(){return ld}),i.d(r,\"VTextarea\",function(){return vd}),i.d(r,\"VTextField\",function(){return Ss}),i.d(r,\"VThemeProvider\",function(){return zn}),i.d(r,\"VTimeline\",function(){return gd}),i.d(r,\"VTimelineItem\",function(){return bd}),i.d(r,\"VTimePicker\",function(){return Td}),i.d(r,\"VTimePickerClock\",function(){return wd}),i.d(r,\"VTimePickerTitle\",function(){return Sd}),i.d(r,\"VToolbar\",function(){return hi}),i.d(r,\"VToolbarItems\",function(){return Ad}),i.d(r,\"VToolbarTitle\",function(){return Bd}),i.d(r,\"VTooltip\",function(){return Ed}),i.d(r,\"VTreeview\",function(){return Gd}),i.d(r,\"VTreeviewNode\",function(){return Hd}),i.d(r,\"VVirtualScroll\",function(){return Ud}),i.d(r,\"VWindow\",function(){return Ga}),i.d(r,\"VWindowItem\",function(){return Xa}),i.d(r,\"VCarouselTransition\",function(){return yn}),i.d(r,\"VCarouselReverseTransition\",function(){return bn}),i.d(r,\"VTabTransition\",function(){return Sn}),i.d(r,\"VTabReverseTransition\",function(){return xn}),i.d(r,\"VMenuTransition\",function(){return wn}),i.d(r,\"VFabTransition\",function(){return Cn}),i.d(r,\"VDialogTransition\",function(){return kn}),i.d(r,\"VDialogBottomTransition\",function(){return $n}),i.d(r,\"VFadeTransition\",function(){return In}),i.d(r,\"VScaleTransition\",function(){return On}),i.d(r,\"VScrollXTransition\",function(){return _n}),i.d(r,\"VScrollXReverseTransition\",function(){return Tn}),i.d(r,\"VScrollYTransition\",function(){return Bn}),i.d(r,\"VScrollYReverseTransition\",function(){return An}),i.d(r,\"VSlideXTransition\",function(){return En}),i.d(r,\"VSlideXReverseTransition\",function(){return Dn}),i.d(r,\"VSlideYTransition\",function(){return Mn}),i.d(r,\"VSlideYReverseTransition\",function(){return Ln}),i.d(r,\"VExpandTransition\",function(){return Vn}),i.d(r,\"VExpandXTransition\",function(){return Pn});var s={};i.r(s),i.d(s,\"ClickOutside\",function(){return or}),i.d(s,\"Color\",function(){return Zd}),i.d(s,\"Intersect\",function(){return Ue}),i.d(s,\"Mutate\",function(){return tp}),i.d(s,\"Resize\",function(){return lr}),i.d(s,\"Ripple\",function(){return Ki}),i.d(s,\"Scroll\",function(){return pi}),i.d(s,\"Touch\",function(){return Wa});i(10);var o=i(0),a=i.n(o),l=function(){return(l=Object.assign||function(t){for(var e,i=1,n=arguments.length;i"},{"title":"","date":"2021-01-27T02:17:48.442Z","updated":"2021-01-27T02:17:48.442Z","comments":true,"path":"love/新建文件夹/jiaoben7691/js/vuetify.min.js","permalink":"https://hujiahao.top/love/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/jiaoben7691/js/vuetify.min.js","excerpt":"","text":"/*! * Vuetify v2.3.0-beta.6 * Forged by John Leider * Released under the MIT License. */ !function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e(require(\"vue\")):\"function\"==typeof define&&define.amd?define([\"vue\"],e):\"object\"==typeof exports?exports.Vuetify=e(require(\"vue\")):t.Vuetify=e(t.Vue)}(\"undefined\"!=typeof self?self:this,function(t){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,\"a\",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p=\"/dist/\",i(i.s=96)}([function(e,i){e.exports=t},,function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){\"use strict\";i.r(e);var n={};i.r(n),i.d(n,\"linear\",function(){return lt}),i.d(n,\"easeInQuad\",function(){return ut}),i.d(n,\"easeOutQuad\",function(){return ct}),i.d(n,\"easeInOutQuad\",function(){return ht}),i.d(n,\"easeInCubic\",function(){return dt}),i.d(n,\"easeOutCubic\",function(){return pt}),i.d(n,\"easeInOutCubic\",function(){return ft}),i.d(n,\"easeInQuart\",function(){return vt}),i.d(n,\"easeOutQuart\",function(){return mt}),i.d(n,\"easeInOutQuart\",function(){return gt}),i.d(n,\"easeInQuint\",function(){return yt}),i.d(n,\"easeOutQuint\",function(){return bt}),i.d(n,\"easeInOutQuint\",function(){return St});var r={};i.r(r),i.d(r,\"VApp\",function(){return f}),i.d(r,\"VAppBar\",function(){return $i}),i.d(r,\"VAppBarNavIcon\",function(){return an}),i.d(r,\"VAlert\",function(){return hn}),i.d(r,\"VAutocomplete\",function(){return Bs}),i.d(r,\"VAvatar\",function(){return Wr}),i.d(r,\"VBadge\",function(){return Ms}),i.d(r,\"VBanner\",function(){return Vs}),i.d(r,\"VBottomNavigation\",function(){return Hs}),i.d(r,\"VBottomSheet\",function(){return Us}),i.d(r,\"VBreadcrumbs\",function(){return Js}),i.d(r,\"VBreadcrumbsItem\",function(){return Xs}),i.d(r,\"VBreadcrumbsDivider\",function(){return Zs}),i.d(r,\"VBtn\",function(){return sn}),i.d(r,\"VBtnToggle\",function(){return to}),i.d(r,\"VCalendar\",function(){return Ma}),i.d(r,\"VCalendarDaily\",function(){return Ea}),i.d(r,\"VCalendarWeekly\",function(){return Ia}),i.d(r,\"VCalendarMonthly\",function(){return Oa}),i.d(r,\"VCard\",function(){return Va}),i.d(r,\"VCardActions\",function(){return Pa}),i.d(r,\"VCardSubtitle\",function(){return ja}),i.d(r,\"VCardText\",function(){return Ha}),i.d(r,\"VCardTitle\",function(){return Fa}),i.d(r,\"VCarousel\",function(){return qa}),i.d(r,\"VCarouselItem\",function(){return Ka}),i.d(r,\"VCheckbox\",function(){return el}),i.d(r,\"VSimpleCheckbox\",function(){return mr}),i.d(r,\"VChip\",function(){return Fn}),i.d(r,\"VChipGroup\",function(){return ol}),i.d(r,\"VColorPicker\",function(){return Kl}),i.d(r,\"VColorPickerSwatches\",function(){return Xl}),i.d(r,\"VColorPickerCanvas\",function(){return wl}),i.d(r,\"VContent\",function(){return Jl}),i.d(r,\"VCombobox\",function(){return tu}),i.d(r,\"VCounter\",function(){return cs}),i.d(r,\"VData\",function(){return ru}),i.d(r,\"VDataIterator\",function(){return uu}),i.d(r,\"VDataFooter\",function(){return ou}),i.d(r,\"VDataTable\",function(){return Eu}),i.d(r,\"VEditDialog\",function(){return Du}),i.d(r,\"VTableOverflow\",function(){return Lu}),i.d(r,\"VDataTableHeader\",function(){return bu}),i.d(r,\"VSimpleTable\",function(){return $u}),i.d(r,\"VVirtualTable\",function(){return Mu}),i.d(r,\"VDatePicker\",function(){return cc}),i.d(r,\"VDatePickerTitle\",function(){return Pu}),i.d(r,\"VDatePickerHeader\",function(){return Yu}),i.d(r,\"VDatePickerDateTable\",function(){return Qu}),i.d(r,\"VDatePickerMonthTable\",function(){return tc}),i.d(r,\"VDatePickerYears\",function(){return ec}),i.d(r,\"VDialog\",function(){return Ys}),i.d(r,\"VDivider\",function(){return yr}),i.d(r,\"VExpansionPanels\",function(){return dc}),i.d(r,\"VExpansionPanel\",function(){return fc}),i.d(r,\"VExpansionPanelHeader\",function(){return gc}),i.d(r,\"VExpansionPanelContent\",function(){return vc}),i.d(r,\"VFileInput\",function(){return Cc}),i.d(r,\"VFooter\",function(){return $c}),i.d(r,\"VForm\",function(){return Oc}),i.d(r,\"VContainer\",function(){return Tc}),i.d(r,\"VCol\",function(){return jc}),i.d(r,\"VRow\",function(){return eh}),i.d(r,\"VSpacer\",function(){return ih}),i.d(r,\"VLayout\",function(){return nh}),i.d(r,\"VFlex\",function(){return rh}),i.d(r,\"VHover\",function(){return sh}),i.d(r,\"VIcon\",function(){return Ti}),i.d(r,\"VImg\",function(){return li}),i.d(r,\"VInput\",function(){return as}),i.d(r,\"VItem\",function(){return ah}),i.d(r,\"VItemGroup\",function(){return Hr}),i.d(r,\"VLabel\",function(){return ts}),i.d(r,\"VLazy\",function(){return uh}),i.d(r,\"VListItemActionText\",function(){return Ur}),i.d(r,\"VListItemContent\",function(){return qr}),i.d(r,\"VListItemTitle\",function(){return Xr}),i.d(r,\"VListItemSubtitle\",function(){return Zr}),i.d(r,\"VList\",function(){return _r}),i.d(r,\"VListGroup\",function(){return Ar}),i.d(r,\"VListItem\",function(){return kr}),i.d(r,\"VListItemAction\",function(){return $r}),i.d(r,\"VListItemAvatar\",function(){return Gr}),i.d(r,\"VListItemIcon\",function(){return Tr}),i.d(r,\"VListItemGroup\",function(){return Nr}),i.d(r,\"VMenu\",function(){return pr}),i.d(r,\"VMessages\",function(){return is}),i.d(r,\"VNavigationDrawer\",function(){return hh}),i.d(r,\"VOverflowBtn\",function(){return ph}),i.d(r,\"VOverlay\",function(){return Ns}),i.d(r,\"VPagination\",function(){return gh}),i.d(r,\"VSheet\",function(){return Re}),i.d(r,\"VParallax\",function(){return yh}),i.d(r,\"VPicker\",function(){return nc}),i.d(r,\"VProgressCircular\",function(){return Ei}),i.d(r,\"VProgressLinear\",function(){return fs}),i.d(r,\"VRadioGroup\",function(){return Sh}),i.d(r,\"VRadio\",function(){return wh}),i.d(r,\"VRangeSlider\",function(){return Oh}),i.d(r,\"VRating\",function(){return _h}),i.d(r,\"VResponsive\",function(){return Xe}),i.d(r,\"VSelect\",function(){return Is}),i.d(r,\"VSkeletonLoader\",function(){return Ah}),i.d(r,\"VSlider\",function(){return ll}),i.d(r,\"VSlideGroup\",function(){return rl}),i.d(r,\"VSlideItem\",function(){return Eh}),i.d(r,\"VSnackbar\",function(){return Dh}),i.d(r,\"VSparkline\",function(){return Yh}),i.d(r,\"VSpeedDial\",function(){return Gh}),i.d(r,\"VStepper\",function(){return qh}),i.d(r,\"VStepperContent\",function(){return Zh}),i.d(r,\"VStepperStep\",function(){return Xh}),i.d(r,\"VStepperHeader\",function(){return Kh}),i.d(r,\"VStepperItems\",function(){return Jh}),i.d(r,\"VSubheader\",function(){return xr}),i.d(r,\"VSwitch\",function(){return td}),i.d(r,\"VSystemBar\",function(){return id}),i.d(r,\"VTabs\",function(){return cd}),i.d(r,\"VTab\",function(){return dd}),i.d(r,\"VTabItem\",function(){return pd}),i.d(r,\"VTabsItems\",function(){return ad}),i.d(r,\"VTabsSlider\",function(){return ld}),i.d(r,\"VTextarea\",function(){return vd}),i.d(r,\"VTextField\",function(){return Ss}),i.d(r,\"VThemeProvider\",function(){return zn}),i.d(r,\"VTimeline\",function(){return gd}),i.d(r,\"VTimelineItem\",function(){return bd}),i.d(r,\"VTimePicker\",function(){return Td}),i.d(r,\"VTimePickerClock\",function(){return wd}),i.d(r,\"VTimePickerTitle\",function(){return Sd}),i.d(r,\"VToolbar\",function(){return hi}),i.d(r,\"VToolbarItems\",function(){return Ad}),i.d(r,\"VToolbarTitle\",function(){return Bd}),i.d(r,\"VTooltip\",function(){return Ed}),i.d(r,\"VTreeview\",function(){return Gd}),i.d(r,\"VTreeviewNode\",function(){return Hd}),i.d(r,\"VVirtualScroll\",function(){return Ud}),i.d(r,\"VWindow\",function(){return Ga}),i.d(r,\"VWindowItem\",function(){return Xa}),i.d(r,\"VCarouselTransition\",function(){return yn}),i.d(r,\"VCarouselReverseTransition\",function(){return bn}),i.d(r,\"VTabTransition\",function(){return Sn}),i.d(r,\"VTabReverseTransition\",function(){return xn}),i.d(r,\"VMenuTransition\",function(){return wn}),i.d(r,\"VFabTransition\",function(){return Cn}),i.d(r,\"VDialogTransition\",function(){return kn}),i.d(r,\"VDialogBottomTransition\",function(){return $n}),i.d(r,\"VFadeTransition\",function(){return In}),i.d(r,\"VScaleTransition\",function(){return On}),i.d(r,\"VScrollXTransition\",function(){return _n}),i.d(r,\"VScrollXReverseTransition\",function(){return Tn}),i.d(r,\"VScrollYTransition\",function(){return Bn}),i.d(r,\"VScrollYReverseTransition\",function(){return An}),i.d(r,\"VSlideXTransition\",function(){return En}),i.d(r,\"VSlideXReverseTransition\",function(){return Dn}),i.d(r,\"VSlideYTransition\",function(){return Mn}),i.d(r,\"VSlideYReverseTransition\",function(){return Ln}),i.d(r,\"VExpandTransition\",function(){return Vn}),i.d(r,\"VExpandXTransition\",function(){return Pn});var s={};i.r(s),i.d(s,\"ClickOutside\",function(){return or}),i.d(s,\"Color\",function(){return Zd}),i.d(s,\"Intersect\",function(){return Ue}),i.d(s,\"Mutate\",function(){return tp}),i.d(s,\"Resize\",function(){return lr}),i.d(s,\"Ripple\",function(){return Ki}),i.d(s,\"Scroll\",function(){return pi}),i.d(s,\"Touch\",function(){return Wa});i(10);var o=i(0),a=i.n(o),l=function(){return(l=Object.assign||function(t){for(var e,i=1,n=arguments.length;i"}],"posts":[{"title":"Spring框架","slug":"Spring","date":"2021-03-19T15:10:06.000Z","updated":"2021-03-19T15:10:06.000Z","comments":true,"path":"2021/03/19/Spring/","link":"","permalink":"https://hujiahao.top/2021/03/19/Spring/","excerpt":"Why Spring?","text":"Why Spring? Spring makes programming Java quicker,easier, and safer for everybody. Spring’s focus on speed, simplicity, and productivity has made it the world’s most popular Java framework. Spring概述1、什么是Spring? Spring 是轻量级的开源的 JavaEE 框架，Spring框架的核心功能可以应用在任何Java应用程序中，但对Java EE平台上的Web应用程序有更好的扩展性。 Spring框架的目标是使得Java EE应用程序的开发更加简捷，通过使用POJO为基础的编程模型促进良好的编程风格。 注：POJO和JavaBean的区别 （1）POJO 和JavaBean是我们常见的两个关键字，一般容易混淆，POJO全称是Plain Ordinary Java Object / Pure Old Java Object，中文可以翻译成：普通Java类，具有一部分getter/setter方法的那种类就可以称作POJO，但是JavaBean则比 POJO复杂很多， Java Bean 是可复用的组件，对 Java Bean 并没有严格的规范，理论上讲，任何一个 Java 类都可以是一个 Bean 。但通常情况下，由于 Java Bean 是被容器所创建（如 Tomcat) 的，所以 Java Bean 应具有一个无参的构造器。 （2）通常 Java Bean 还要实现 Serializable 接口用于实现 Bean 的持久性。 Java Bean 是不能被跨进程访问的。JavaBean是一种组件技术，就好像你做了一个扳子，而这个扳子会在很多地方被拿去用，这个扳子也提供多种功能(你可以拿这个扳子扳、锤、撬等等)，而这个扳子就是一个组件。一般在web应用程序中建立一个数据库的映射对象时，我们只能称它为POJO。POJO(Plain Old Java Object)这个名字用来强调它是一个普通java对象，而不是一个特殊的对象，其主要用来指代那些没有遵从特定的Java对象模型、约定或框架（如EJB）的Java对象。理想地讲，一个POJO是一个不受任何限制的Java对象（除了Java语言规范）。 2、Spring有哪些优点？ 轻量级：Spring在大小和透明性方面绝对属于轻量级的，基础版本的Spring框架大约只有2MB。 控制反转(IoC)： Spring使用控制反转技术实现了松耦合。依赖被注入到对象，而不是创建或寻找依赖对象。 面向切面编程(AOP)： Spring支持面向切面编程，同时把应用的业务逻辑与系统的服务分离开来。 容器：Spring包含并管理应用程序对象的配置及生命周期。 MVC框架：Spring的web框架是一个设计优良的web MVC框架，很好的取代了一些web框架。 事务管理：Spring对下至本地业务上至全局业务(JAT)提供了统一的事务管理接口。 异常处理：Spring提供一个方便的API将特定技术的异常(由JDBC, Hibernate, 或JDO抛出)转化为一致的、Unchecked异常。 3、Spring 有两个核心部分：IOC 和 AOP（1）IOC：控制反转，把创建对象过程交给 Spring 进行管理 （2）AOP：面向切面，不修改源代码进行功能增强 4、Spring的特点（1）方便解耦，简化开发 （2）Aop 编程支持 （3）方便程序测试 （4）方便和其他框架进行整合 （5）方便进行事务操作 （6）降低 API 开发难度 5、Spring架构图，Spring由哪些模块组成？Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在核心容器（Core Container） 、 AOP（Aspect Oriented Programming）和设备支持（Instrmentation） 、数据访问与集成（Data Access/Integeration） 、 Web、 消息（Messaging） 、 Test等 6 个模块中。 以下是 Spring 5 的模块结构图： 图来源于官网，以下各个模块的介绍。 第一个Spring项目1、下载Spring，目前版本5.3.4下载地址：https://repo.spring.io/release/org/springframework/spring/ 2、打开Idea创建一个普通的Java工程，导入Spring5的相关jar包 commons-logging-1.2.jar，下载链接：http://commons.apache.org/proper/commons-logging/download_logging.cgi 3、创建一个User.java类123456public class User &#123; public void add()&#123; System.out.println(&quot;add......&quot;); &#125;&#125; 4、在src目录下创建Spring配置文件，bean1.xml bean1.xml 1234567&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;bean id=&quot;user&quot; class=&quot;com.jiahao.spring5.User&quot;&gt;&lt;/bean&gt;&lt;/beans&gt; 5、创建测试类Test.java 1234567891011@Testpublic void TestAdd()&#123; //加载Spring配置文件 ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;); //获取配置创建的文件 User user = context.getBean(&quot;user&quot;,User.class); System.out.println(user); user.add();&#125; 6、输出结果 123com.jiahao.spring5.User@612fc6ebadd...... IOC(概念和原理)1、什么是IOC? Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。 使用目的：降低解耦。 2、IOC底层 xml解析、工厂模式、反射 画图讲解 IOC 底层原理: 3、IOC（BeanFactory 接口） 1、IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂 2、Spring 提供 IOC 容器实现两种方式：（两个接口） （1）BeanFactory：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用 ​ 加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象 （2）ApplicationContext：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人 员进行使用 ​ 加载配置文件时候就会把在配置文件对象进行创建 推荐使用 3、ApplicationContext通常的实现是什么? FileSystemXmlApplicationContext ：此容器从一个XML文件中加载beans的定义，XML Bean配置文件的全路径名必须提供给它的构造函数。 ClassPathXmlApplicationContext：此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。 4、IOC的优点是什么？ IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。 5、Bean 工厂和 Application contexts 有什么区别？ Application contexts提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的bean发布事件。另外，在容器或容器内的对象上执行的那些不得不由bean工厂以程序化方式处理的操作，可以在Application contexts中以声明的方式处理。Application contexts实现了MessageSource接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。 IOC操作Bean管理1、概念1.1、什么是 Bean 管理 ​ （0）Bean 管理指的是两个操作 ​ （1）Spring 创建对象 ​ （2）Spirng 注入属性 2.2、Bean 管理操作有两种方式 ​ （1）基于 xml 配置文件方式实现 ​ （2）基于注解方式实现 2、基于 xml 方式2.1、基于 xml 方式创建对象 12 &lt;!--配置User对象创建--&gt;&lt;bean id=&quot;user&quot; class=&quot;com.jiahao.spring5.User&quot;&gt;&lt;/bean&gt; （1）在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建 （2）在 bean 标签有很多属性，介绍常用的属性 * id 属性：唯一标识 * class 属性：类全路径（包类路径） （3）创建对象时候，默认也是执行无参数构造方法完成对象创建 2.2、基于 xml 方式注入属性 ​ DI：依赖注入，就是注入属性 (1) 什么是Spring的依赖注入? 依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。 (2)有哪些不同类型的IOC（依赖注入）方式？ 构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。 Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。 (3)哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？ 两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。 2.3、第一种注入方式：使用 set 方法进行注入 （1）创建类，定义属性和对应的 set 方法 12345678910111213141516public class Book &#123; private String name; private String author; public void setName(String name) &#123; this.name = name; &#125; public void setAuthor(String author) &#123; this.author = author; &#125; public void testbook()&#123; System.out.println(name+&quot;::&quot;+author); &#125;&#125; （2）在 spring 配置文件配置对象创建，配置属性注入 12345678&lt;!-- set 方法注入属性 --&gt;&lt;bean id=&quot;book&quot; class=&quot;com.jiahao.spring5.Book&quot;&gt; &lt;!--使用 property 完成属性注入 name：类里面属性名称 value：向属性注入的值--&gt; &lt;property name=&quot;name&quot; value=&quot;易筋经&quot;&gt;&lt;/property&gt; &lt;property name=&quot;author&quot; value=&quot;达摩老祖&quot;&gt;&lt;/property&gt; &lt;/bean&gt; (3)测试 123456789@Testpublic void TestBook()&#123; //加载Spring配置文件 ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;); //获取配置创建的文件 Book book = context.getBean(&quot;book&quot;,Book.class); System.out.println(book); book.testbook();&#125; (4)输出结果 12com.jiahao.spring5.Book@5204062d易筋经::达摩老祖 2.4、第二种注入方式：使用有参数构造进行注入 （1）创建类，定义属性，创建属性对应有参数构造方法 123456789101112131415//使用有参数构造注入public class Orders &#123; private String oname; private String address; public Orders(String oname, String address) &#123; this.oname = oname; this.address = address; &#125; public void orderTest()&#123; System.out.println(oname+&quot;::&quot;+address); &#125;&#125; （2）在 spring 配置文件中进行配置 12345&lt;!-- 有参数构造注入属性 --&gt;&lt;bean id=&quot;orders&quot; class=&quot;com.jiahao.spring5.Orders&quot;&gt; &lt;constructor-arg name=&quot;oname&quot; value=&quot;宁静致远&quot;&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=&quot;address&quot; value=&quot;郑州&quot;&gt;&lt;/constructor-arg&gt;&lt;/bean&gt; (3）测试 123456789@Testpublic void TestOrders()&#123; //加载Spring配置文件 ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;); //获取配置创建的文件 Orders orders = context.getBean(&quot;orders&quot;,Orders.class); System.out.println(orders); orders.orderTest();&#125; (4)输出结果 12com.jiahao.spring5.Orders@5204062d宁静致远::郑州 2.5、p 名称空间注入（了解） （1）使用 p 名称空间注入，可以简化基于 xml 配置方式 ​ 第一步 添加 p 名称空间在配置文件中 1234&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; ​ 第二步 进行属性注入，在 bean 标签里面进行操作 123&lt;!--2 set 方法注入属性--&gt;&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot; p:bname=&quot;九阳神功&quot; p:bauthor=&quot;无名氏&quot;&gt;&lt;/bean&gt; 2.6、xml注入其它类型属性1、字面量（1）null 值 123&lt;property name=&quot;adress&quot;&gt; &lt;null/&gt;&lt;/property&gt; （2）属性值包含特殊符号 12345678&lt;!--属性值包含特殊符号 1 把&lt;&gt;进行转义 &amp;lt; &amp;gt; 2 把带特殊符号内容写到 CDATA--&gt;&lt;property name=&quot;address&quot;&gt; &lt;value&gt;&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;&lt;/value&gt;&lt;/property&gt; 2、注入外部bean（1）创建两个类 service 类和 dao 类 （2）在 service 调用 dao 里面的方法 （3）在 spring 配置文件中进行配置 1234//创建UserDao接口public interface UserDao &#123; public void Update();&#125; 12345678//创建UserDao实现类public class UserDaoImpl implements UserDao&#123; @Override public void Update() &#123; System.out.println(&quot;dao update...&quot;); &#125;&#125; 1234567891011121314151617181920public class UserService &#123; //创建 UserDao 类型属性，生成 set 方 private UserDao userDao; public void setUserDao(UserDao userDao) &#123; this.userDao = userDao; &#125; public void add()&#123; System.out.println(&quot;UserService.....&quot;); userDao.Update(); /* 原始方法创建对象： UserDao userDao = new UserDaoImpl(); userDao.Update(); */ &#125;&#125; 123456789 &lt;!--1 service 和 dao 对象创建--&gt;&lt;bean id=&quot;UserService&quot; class=&quot;com.jiahao.spring5.Service.UserService&quot;&gt; &lt;!--注入 userDao 对象 name 属性：类里面属性名称 ref 属性：创建 userDao 对象 bean 标签 id 值 --&gt; &lt;property name=&quot;userDao&quot; ref=&quot;userDaoImpl&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.jiahao.spring5.Dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; 测试： 1234567@Testpublic void test1() &#123; ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean2.xml&quot;); UserService userService = context.getBean(&quot;UserService&quot;, UserService.class); System.out.println(userService); userService.add();&#125; 输出结果： 123com.jiahao.spring5.Service.UserService@a74868dUserService.....dao update... 3、注入内部bean（1）一对多关系：部门和员工 一个部门有多个员工，一个员工属于一个部门 部门是一，员工是多 （2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示 123456789101112131415//部门类public class Dept &#123; private String name; public void setName(String name) &#123; this.name = name; &#125; @Override public String toString() &#123; return &quot;Dept&#123;&quot; + &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; 123456789101112131415161718192021222324//员工类public class Emp &#123; private String name; private String gender; //员工属于某个部门 private Dept dept; public void setDept(Dept dept) &#123; this.dept = dept; &#125; public void setName(String name) &#123; this.name = name; &#125; public void setGender(String gender) &#123; this.gender = gender; &#125; public void add()&#123; System.out.println(name+&quot;::&quot;+gender+&quot;::&quot;+dept); &#125;&#125; (3) 在spring配置文件中进行配置 123456789&lt;bean id=&quot;emp&quot; class=&quot;com.jiahao.spring5.bean.Emp&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;Lucy&quot; &gt;&lt;/property&gt; &lt;property name=&quot;gender&quot; value=&quot;女&quot;&gt;&lt;/property&gt; &lt;property name=&quot;dept&quot; &gt; &lt;bean id=&quot;dept&quot; class=&quot;com.jiahao.spring5.bean.Dept&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;安保部&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/property&gt;&lt;/bean&gt; (4) 测试 12345678910public class Testbean &#123; @Test public void testbean1()&#123; ApplicationContext context =new ClassPathXmlApplicationContext(&quot;bean3.xml&quot;); Emp emp = context.getBean(&quot;emp&quot;, Emp.class); System.out.println(emp); emp.add(); &#125;&#125; (5)结果 12com.jiahao.spring5.bean.Emp@4fb64261Lucy::女::Dept&#123;name=&#x27;安保部&#x27;&#125; 4、级联赋值（1）第一种写法 部门类和员工类代码不动，新建bean4.xml 12345678&lt;bean id=&quot;emp&quot; class=&quot;com.jiahao.spring5.bean.Emp&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;Lucy&quot;&gt;&lt;/property&gt; &lt;property name=&quot;gender&quot; value=&quot;女&quot;&gt;&lt;/property&gt; &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;dept&quot; class=&quot;com.jiahao.spring5.bean.Dept&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;技术部&quot;&gt;&lt;/property&gt;&lt;/bean&gt; 测试 1234567@Testpublic void testbean2()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;); Emp emp = context.getBean(&quot;emp&quot;,Emp.class); System.out.println(emp); emp.add();&#125; 结果 12com.jiahao.spring5.bean.Emp@25bbf683Lucy::女::Dept&#123;name=&#x27;技术部&#x27;&#125; (2)第二种写法 修改Emp类中的代码，添加dept的get方法 123public Dept getDept() &#123; return dept;&#125; 修改bean中代码 123456&lt;bean id=&quot;emp&quot; class=&quot;com.jiahao.spring5.bean.Emp&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;Lucy&quot;&gt;&lt;/property&gt; &lt;property name=&quot;gender&quot; value=&quot;女&quot;&gt;&lt;/property&gt; &lt;property name=&quot;dept.name&quot; value=&quot;财务部&quot;&gt;&lt;/property&gt; &lt;/bean&gt; 测试结果 12com.jiahao.spring5.bean.Emp@7276c8cdLucy::女::Dept&#123;name=&#x27;财务部&#x27;&#125; 2.7、xml 注入集合属性1、注入数组类型属性 2、注入 List 集合类型属性 3、注入 Map 集合类型属性 （1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法 123456789101112131415161718192021222324252627282930public class stu &#123; private String[] courses; private List&lt;String&gt; list; private Map&lt;String,String&gt; map; private Set&lt;String&gt; set; public void setCourses(String[] courses) &#123; this.courses = courses; &#125; public void setList(List&lt;String&gt; list) &#123; this.list = list; &#125; public void setMap(Map&lt;String, String&gt; map) &#123; this.map = map; &#125; public void setSet(Set&lt;String&gt; set) &#123; this.set = set; &#125; public void test()&#123; System.out.println(Arrays.toString(courses)); System.out.println(list); System.out.println(map); System.out.println(set); &#125;&#125; （2）在 spring 配置文件进行配置 1234567891011121314151617181920212223242526&lt;bean id=&quot;stu&quot; class=&quot;com.jiahao.spring5.bean.stu&quot;&gt; &lt;property name=&quot;courses&quot; &gt; &lt;array&gt; &lt;value&gt;java课程&lt;/value&gt; &lt;value&gt;python课程&lt;/value&gt; &lt;/array&gt; &lt;/property&gt; &lt;property name=&quot;list&quot;&gt; &lt;list&gt; &lt;value&gt;张三&lt;/value&gt; &lt;value&gt;李四&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name=&quot;map&quot;&gt; &lt;map&gt; &lt;entry key=&quot;JAVA&quot; value=&quot;java&quot;&gt;&lt;/entry&gt; &lt;entry key=&quot;PYTHON&quot; value=&quot;python&quot;&gt;&lt;/entry&gt; &lt;/map&gt; &lt;/property&gt; &lt;property name=&quot;set&quot;&gt; &lt;set&gt; &lt;value&gt;mysql&lt;/value&gt; &lt;value&gt;redis&lt;/value&gt; &lt;/set&gt; &lt;/property&gt;&lt;/bean&gt; (3) 测试 1234567@Testpublic void teststu()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean5.xml&quot;); stu s = context.getBean(&quot;stu&quot;, stu.class); s.test();&#125; 结果： 1234[java课程, python课程][张三, 李四]&#123;JAVA=java, PYTHON=python&#125;[mysql, redis] 2.8、在集合里面设置对象类型值(1) 创建stu类 1234567891011121314151617181920212223242526272829303132public class stu &#123; private String[] courses; private List&lt;String&gt; list; private Map&lt;String,String&gt; map; private Set&lt;String&gt; set; private List&lt;Courses&gt; coursesList; public void setCoursesList(List&lt;Courses&gt; coursesList) &#123; this.coursesList = coursesList; &#125; public void setCourses(String[] courses) &#123; this.courses = courses; &#125; public void setList(List&lt;String&gt; list) &#123; this.list = list; &#125; public void setMap(Map&lt;String, String&gt; map) &#123; this.map = map; &#125; public void setSet(Set&lt;String&gt; set) &#123; this.set = set; &#125; public void test()&#123; System.out.println(coursesList); &#125;&#125; (2) 创建Courses类 123456789101112131415public class Courses &#123; private String cname; public void setCname(String cname) &#123; this.cname = cname; &#125; @Override public String toString() &#123; return &quot;Courses&#123;&quot; + &quot;cname=&#x27;&quot; + cname + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; (3) 配置bean.xml 1234567891011121314151617&lt;!--注入 list 集合类型，值是对象--&gt;&lt;bean id=&quot;stu&quot; class=&quot;com.jiahao.spring5.bean.stu&quot;&gt; &lt;property name=&quot;coursesList&quot;&gt; &lt;list&gt; &lt;ref bean=&quot;course1&quot;&gt;&lt;/ref&gt; &lt;ref bean=&quot;course2&quot;&gt;&lt;/ref&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!--创建多个 course 对象--&gt; &lt;bean id=&quot;course1&quot; class=&quot;com.jiahao.spring5.bean.Courses&quot;&gt; &lt;property name=&quot;cname&quot; value=&quot;Spring5框架&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;course2&quot; class=&quot;com.jiahao.spring5.bean.Courses&quot;&gt; &lt;property name=&quot;cname&quot; value=&quot;Mybatis框架&quot;&gt;&lt;/property&gt; &lt;/bean&gt; (4) 测试 123456@Testpublic void teststu()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean6.xml&quot;); stu s = context.getBean(&quot;stu&quot;, stu.class); s.test();&#125; (5) 结果 1[Courses&#123;cname=&#x27;Spring5框架&#x27;&#125;, Courses&#123;cname=&#x27;Mybatis框架&#x27;&#125;] 2.9、把集合注入部分提取出来(1) 创建book类 123456789101112public class book &#123; private List&lt;String&gt; list; public void setList(List&lt;String&gt; list) &#123; this.list = list; &#125; public void test()&#123; System.out.println(list); &#125;&#125; (2) 配置bean.xml 12345678910111213141516171819&lt;!--在 spring 配置文件中引入名称空间 util--&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;&lt;!-- 使用 util 标签完成 list 集合注入提取--&gt; &lt;util:list id=&quot;booklist&quot;&gt; &lt;value&gt;易筋经&lt;/value&gt; &lt;value&gt;曾国潘家书&lt;/value&gt; &lt;value&gt;道德经&lt;/value&gt; &lt;/util:list&gt; &lt;bean id=&quot;book&quot; class=&quot;com.jiahao.spring5.bean.book&quot;&gt; &lt;property name=&quot;list&quot; ref=&quot;booklist&quot;&gt;&lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; (3) 测试 123456@Testpublic void test()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean7.xml&quot;); book b = context.getBean(&quot;book&quot;, book.class); b.test();&#125; (4)结果 1[易筋经, 曾国潘家书, 道德经] 2.10、FactoryBean1、Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean） 2、普通 bean：在配置文件中定义 bean 类型就是返回类型 3、工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样 第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean 第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型 123456789101112131415161718192021public class Mybean implements FactoryBean&lt;Courses&gt; &#123; @Nullable @Override public Courses getObject() throws Exception &#123; Courses courses = new Courses(); courses.setCname(&quot;abc&quot;); return courses; &#125; @Nullable @Override public Class&lt;?&gt; getObjectType() &#123; return null; &#125; @Override public boolean isSingleton() &#123; return false; &#125;&#125; 123456789101112131415public class Courses &#123; private String cname; public void setCname(String cname) &#123; this.cname = cname; &#125; @Override public String toString() &#123; return &quot;Courses&#123;&quot; + &quot;cname=&#x27;&quot; + cname + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; 1&lt;bean id=&quot;mybean&quot; class=&quot;com.jiahao.spring5.factorybean.Mybean&quot;&gt; 123456789public class testMybean &#123; @Test public void test()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean8.xml&quot;); Courses courses = context.getBean(&quot;mybean&quot;, Courses.class); System.out.println(courses); &#125;&#125; 2.11、bean 作用域1、在 Spring 里面，设置创建 bean 实例是单实例还是多实例 2、在 Spring 里面，默认情况下，bean 是单实例对象 (1)创建demo类 123456public class demo &#123; private String dname; public void setDname(String dname) &#123; this.dname = dname; &#125;&#125; (2)配置bean.xml 1&lt;bean id=&quot;demo1&quot; class=&quot;com.jiahao.spring5.bean.demo&quot;&gt; (3)测试 12345678@Testpublic void test()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean9.xml&quot;); demo d1 = context.getBean(&quot;demo1&quot;, demo.class); demo d2 = context.getBean(&quot;demo1&quot;, demo.class); System.out.println(d1); System.out.println(d2);&#125; (4)结果 123com.jiahao.spring5.bean.demo@612fc6ebcom.jiahao.spring5.bean.demo@612fc6eb//两个地址相同,默认是单实例对象 3、如何设置单实例还是多实例 （1）在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例 （2）scope 属性值 第一个值 默认值，singleton，表示是单实例对象 第二个值 prototype，表示是多实例对象 1&lt;bean id=&quot;demo1&quot; class=&quot;com.jiahao.spring5.bean.demo&quot; scope=&quot;prototype&quot;&gt; 123com.jiahao.spring5.bean.demo@3aeaafa6com.jiahao.spring5.bean.demo@76a3e297//地址不同，为多实例对象 （3）singleton 和 prototype 区别 第一 singleton 单实例，prototype 多实例 第二 设置 scope 值是 singleton 时候，加载 spring 配置文件时候就会创建单实例对象 设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建 对象，在调用 getBean 方法时候创建多实例对象","categories":[{"name":"SSM","slug":"SSM","permalink":"https://hujiahao.top/categories/SSM/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://hujiahao.top/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"https://hujiahao.top/tags/Spring/"}],"author":"Hu"},{"title":"小文有话说","slug":"小文有话说","date":"2021-03-19T15:08:30.000Z","updated":"2021-03-19T15:08:30.000Z","comments":true,"path":"2021/03/19/小文有话说/","link":"","permalink":"https://hujiahao.top/2021/03/19/%E5%B0%8F%E6%96%87%E6%9C%89%E8%AF%9D%E8%AF%B4/","excerpt":"死刑是人类文明的产物，也是人类文明的悲哀。在我看来，它是法律处罚的极致，也是人性善恶的凝聚焦点。展现人性惊心动魄之处，同时也折射出我们法律的合理性。","text":"死刑是人类文明的产物，也是人类文明的悲哀。在我看来，它是法律处罚的极致，也是人性善恶的凝聚焦点。展现人性惊心动魄之处，同时也折射出我们法律的合理性。 之所以欣赏一个东西，其实和东西事物本身无关，只是自己的一种感情共鸣而已。 素衣闲坐，小楼听春雨。待晴窗初霁，门庭新绿， 无不成礼义，色无路静人稀，财无不成世界，气无反被人欺。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://hujiahao.top/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[],"author":"Dany"},{"title":"数据结构与算法之查找","slug":"查找","date":"2021-03-04T02:15:43.000Z","updated":"2021-03-04T02:15:43.000Z","comments":true,"path":"2021/03/04/查找/","link":"","permalink":"https://hujiahao.top/2021/03/04/%E6%9F%A5%E6%89%BE/","excerpt":"","text":"二叉排序树(1) 若其左子树非空，则左子树上所有结点的值均小于根节点的值。 (2) 若其右子树非空，则右子树上的所有结点的值均大于等于根结点的值。 (3) 其左子树本身又各是一棵二叉排序树。 散列表(hash 表)优点： 查找效率高； 缺点：空间效率低。 散列表的构造方法直接定址法:Hash(key) = a * key + b (a,b为常数) 优点: 以关键码key的某个线性函数值为散列地址，不会产生冲突。 缺点: 要占用连续的地址空间，空间效率低。 例： {100，300，500，700，800，900 } . 散列函数Hash(key) = key/100 (a=1/100 , b=0 ) 0 1 2 3 4 5 6 7 8 9 100 300 500 700 800 900 除留余数法:Hash(key) = key mod p (p是一个整数) 关键：如何选取合适的 p ? 技巧：设表长为m，取p&lt;= m且为质数 例: {15,23,27,38,53,61,70} . 散列函数Hash(key) = key mod 7 0 1 2 3 4 5 6 70 15 23 48 53 61 27 处理冲突的方法开放定址法基本思想： 有冲突就去寻找下一个空的散列地址，只要散列表空间足够大，空的散列表地址总能找到，并将数据元素存入。 H（key）=（H（key）+ d）MOD m（其中 m 为哈希表的表长，d 为一个增量）当得出的哈希地址产生冲突时，选取以下 3 种方法中的一种获取 d 的值，然后继续计算，直到计算出的哈希地址不在冲突为止，这 3 种方法为： 线性探测法: d=1,2,3, … ,m-1 二次探测法: d=1^2 , -1^2 , 2^2 , -2^2 , 3^2, … 伪随机探测法: d=伪随机数 例如，在长度为 11 的哈希表中已填写好 17、60 和 29 这 3 个数据（如图 2（a） 所示），其中采用的哈希函数为：H（key）=key MOD 11，现有第 4 个数据 38 ，当通过哈希函数求得的哈希地址为 5，与 60 冲突，则分别采用以上 3 种方式求得插入位置如图 2（b）所示：","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"数据结构与算法之图","slug":"图","date":"2021-01-22T09:17:43.000Z","updated":"2021-01-22T09:17:43.000Z","comments":true,"path":"2021/01/22/图/","link":"","permalink":"https://hujiahao.top/2021/01/22/%E5%9B%BE/","excerpt":"","text":"图的基本概念图由结点的有穷集合V和边的集合E组合。为了与树形结构进行区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对。若两个顶点之间存在一条边，则表示这两个顶点具有相邻关系。 1.有向图和无向图 (有向图) (无向图) 2.入度和出度对于有向图中的一个顶点 V 来说，箭头指向 V 的弧的数量为 V 的入度（InDegree，记为 ID(V)）；箭头远离 V 的弧的数量为 V 的出度（OutDegree，记为OD(V)）。拿图 2 中的顶点 V1来说，该顶点的入度为 1，出度为 2（该顶点的度为 3）。 3.(V1,V2) 和 &lt;V1,V2&gt; 的区别无向图中描述两顶点（V1 和 V2）之间的关系可以用 (V1,V2) 来表示，而有向图中描述从 V1 到 V2 的”单向”关系用 &lt;V1,V2&gt; 来表示。由于图存储结构中顶点之间的关系是用线来表示的，因此 (V1,V2) 还可以用来表示无向图中连接 V1 和 V2 的线，又称为边；同样，&lt;V1,V2&gt; 也可用来表示有向图中从 V1 到 V2 带方向的线，又称为弧。 4.集合 VR 的含义并且，图中习惯用 VR 表示图中所有顶点之间关系的集合。例如，图 1 中无向图的集合 VR={(v1,v2),(v1,v4),(v1,v3),(v3,v4)}，图 2 中有向图的集合 VR={&lt;v1,v2&gt;,&lt;v1,v3&gt;,&lt;v3,v4&gt;,&lt;v4,v1&gt;}。 5.路径和回路无论是无向图还是有向图，从一个顶点到另一顶点途径的所有顶点组成的序列（包含这两个顶点），称为一条路径。如果路径中第一个顶点和最后一个顶点相同，则此路径称为”回路”（或”环”）。 6.简单路径序列中顶点不重复出现的路径称为简单路径。 7.权和网的含义在某些实际场景中，图中的每条边（或弧）会赋予一个实数来表示一定的含义，这种与边（或弧）相匹配的实数被称为”权”，而带权的图通常称为网。如图所示，就是一个网结构： (带权的图存储结构) 8.子图指的是由图中一部分顶点和边构成的图，称为原图的子图。 9.完全图若图中各个顶点都与除自身外的其他顶点有关系，这样的无向图称为完全图(如图 a)。同时，满足此条件的有向图则称为有向完全图(如图b) (完全图) 具有 n 个顶点的完全图，图中边的数量为 n(n-1)/2；而对于具有 n 个顶点的有向完全图，图中弧的数量为 n(n-1)。 连通图图中从一个顶点到达另一顶点，若存在至少一条路径，则称这两个顶点是连通着的。例如图 1 中，虽然 V1 和 V3 没有直接关联，但从 V1 到 V3 存在两条路径，分别是 V1-V2-V3 和 V1-V4-V3，因此称 V1 和 V3 之间是连通的。 (图 1 顶点之间的连通状态示意图) 无向图中，如果任意两个顶点之间都能够连通，则称此无向图为连通图。例如，图 2 中的无向图就是一个连通图，因为此图中任意两顶点之间都是连通的。 (图 2 连通图示意图) 若无向图不是连通图，但图中存储某个子图符合连通图的性质，则称该子图为连通分量。 强连通图有向图中，若任意两个顶点 Vi 和 Vj，满足从 Vi 到 Vj 以及从 Vj 到 Vi 都连通，也就是都含有至少一条通路，则称此有向图为强连通图。如图 4 所示就是一个强连通图。 (图 4 强连通图) 与此同时，若有向图本身不是强连通图，但其包含的最大连通子图具有强连通图的性质，则称该子图为强连通分量。 (图 5 强连通分量) 如图 5 所示，整个有向图虽不是强连通图，但其含有两个强连通分量。 可以这样说，连通图是在无向图的基础上对图中顶点之间的连通做了更高的要求，而强连通图是在有向图的基础上对图中顶点的连通做了更高的要求。 邻接矩阵邻接矩阵是图的顺序存储结构。由邻接矩阵的行数或列数可知图中的顶点数。 邻接表邻接表是图的一种链式存储结构。所谓邻接表就是对图中的每个顶点i建立一个单链表，每个单链表的第一个结点存放有关顶点的信息，把这一结点看作链表的表头，其余结点存放有关边的信息。因此，连接表由单链表的表头形成的顶点表和单链表其余结点形成的边表两部分组成。一般定点表存放顶点信息和指向由第一个边结点指针，边表结点存放与当前顶点相邻顶点的序号和指向下一个边结点的指针。 十字链表十字链表是有向图的另一种链式存储结构。我们也可以把它看成是有向图的邻接表和逆邻接表结合起来形成的一种链表。 有向图的每一条弧对应十字链表中的一个弧结点，同时有向图中的每个顶点在十字链表中对应有一个结点，叫做顶点结点。 邻接多重表 深度优先遍历 广度优先遍历 生成树所有顶点均有边连接起来，但不存在回路的图。对连通图进行遍历，过程中所经过的边和顶点的组合可看做是一棵普通树，通常称为生成树。 (连通图及其对应的生成树) 一个图可以有许多棵不同的生成树。 所有生成树具有以下共同特点 生成树的顶点个数与图的顶点个数相同； 生成树是图的极小连通图，去掉一条边则非连通； 一个有n个顶点的连通图的生成树有n-1条边； 在生成树中再添加一条边必须形成回路。 最小生成树：给定一个无向网络，在该网的所有生成树中，使得各边权值之和最小的那棵生成树称为该网的最小生成树，也叫最小代价生成树。 由于最小生成树本身是一棵生成树，所以需要时刻满足以下两点： 生成树中任意顶点之间有且仅有一条通路，也就是说，生成树中不能存在回路； 对于具有 n 个顶点的连通网，其生成树中只能有 n-1 条边，这 n-1 条边连通着 n 个顶点。 普里姆算法从顶点的角度为出发点，时间复杂度为O(n2)，更适合与解决边的绸密度更高的连通网。克鲁斯卡尔算法从边的角度求网的最小生成树，时间复杂度为O(eloge)。和普里姆算法恰恰相反，更适合于求边稀疏的网的最小生成树。 普里姆(Prim)算法从图中任意取出一个顶点，把它当成一棵树，然后从与这棵树相接的边中选取一条最短(权值最小)的边，并将这条边及其所连接的顶点也并入这棵树中，此时得到了一棵有两个顶点的树。然后从与这棵树相连的边中选取一条最短的边，并将这条边及其所连顶点并入当前树中，得到一棵有3个顶点的树。以此类推，直到图中所有顶点都被并入树中为止，此时得到的生成树就是最小生成树。 克鲁斯卡尔(Kruskal)算法 (图一 连通图) 例如，使用克鲁斯卡尔算法找图 1 的最小生成树的过程为： 首先，在初始状态下，对各顶点赋予不同的标记（用颜色区别），如下图所示： (1) 对所有边按照权值的大小进行排序，按照从小到大的顺序进行判断，首先是（1，3），由于顶点 1 和顶点 3 标记不同，所以可以构成生成树的一部分，遍历所有顶点，将与顶点 3 标记相同的全部更改为顶点 1 的标记，如（2）所示： (2) 其次是（4，6）边，两顶点标记不同，所以可以构成生成树的一部分，更新所有顶点的标记为： (3) 其次是（2，5）边，两顶点标记不同，可以构成生成树的一部分，更新所有顶点的标记为： (4) 然后最小的是（3，6）边，两者标记不同，可以连接，遍历所有顶点，将与顶点 6 标记相同的所有顶点的标记更改为顶点 1 的标记： (5) 继续选择权值最小的边，此时会发现，权值为 5 的边有 3 个，其中（1，4）和（3，4）各自两顶点的标记一样，如果连接会产生回路，所以舍去，而（2，3）标记不一样，可以选择，将所有与顶点 2 标记相同的顶点的标记全部改为同顶点 3 相同的标记： (6) 当选取的边的数量相比与顶点的数量小 1 时，说明最小生成树已经生成。所以最终采用克鲁斯卡尔算法得到的最小生成树为（6）所示。 最短路径 两种常见的最短路径问题：一、单源最短路径——用Dijkstra(迪杰斯特拉)算法二、所有顶点间的最短路径——用Floyd(弗洛伊德)算法 Dijkstra(迪杰斯特拉)算法 Floyd(弗洛伊德)算法","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"道德经","slug":"道德经","date":"2021-01-20T12:15:46.000Z","updated":"2021-01-20T12:15:46.000Z","comments":true,"path":"2021/01/20/道德经/","link":"","permalink":"https://hujiahao.top/2021/01/20/%E9%81%93%E5%BE%B7%E7%BB%8F/","excerpt":"《道德经》也称《老子》，分为道经和德经两部分。道经为上篇，从一章到三十七章。德经为下篇，从三十八章到八十一章。由形而上的“道”，谈及圣人之道以及修养之道，可以指导我们为人处世，做到与自然和谐相处。","text":"《道德经》也称《老子》，分为道经和德经两部分。道经为上篇，从一章到三十七章。德经为下篇，从三十八章到八十一章。由形而上的“道”，谈及圣人之道以及修养之道，可以指导我们为人处世，做到与自然和谐相处。 一 章 论 道道 可 道 ， 非 常 道 。 名 可 名 ， 非 常 名 。 无 名 天 地 之 始 ﹔ 有 名 万 物 之 母 。 故 常 无 ， 欲 以 观 其 妙 ﹔ 常 有 ， 欲 以 观 其 徼 。 此 两 者 ， 同 出 而 异 名 ， 同 谓 之 玄 。 玄 之 又 玄 ， 众 妙 之 门 。 译文： 可以说出的“道”，不是永恒的道。可以说出的名“名”，不是永恒的“名”。“无名”，天地混沌未开之际的状况；“有名”，万物产生之初的命名。因此，要常从“无”中去领悟“道”的奥妙；要常从“有”中去认识“道”的端倪。“无”和“有”，来源相同而名称不同，可以称之为玄妙深远。玄妙深远，是洞悉天地万物变化的途径。 二 章 有无相生天 下 皆 知 美 之 为 美 ， 斯 恶 已 。 皆 知 善 之 为 善 ， 斯 不 善 已 。 有 无 相 生 ， 难 易 相 成 ， 长 短 相 形 ，高 下 相 盈 ， 音 声 相 和 ， 前 后 相 随 。恒 也 。 是 以 圣 人 处 无 为 之 事 ，行 不 言 之 教 ﹔ 万 物 作 而 弗 始 ，生 而 弗 有 ， 为 而 弗 恃 ， 功 成 而 不 居 。 夫 唯 弗 居 ， 是 以 不 去 。 译文：天下的人都知道什么是美，也就有了丑；都知道什么是善，也就有了恶。所以，有无对立而生，难易相反相成，长短对比而显，高低对照而存，音声相谐而和，前后相随而至。这是宇宙万物永恒之道。因此，圣人用“无为”的方式对待世事，用“不言”的方式教化众生。听凭万物兴起而不干预，生养万物而不占有，孕育万物而不占有，孕育万物而不恃，功业成就而不自居。正因为不居功，所以功绩永存。","categories":[],"tags":[]},{"title":"栈和队列","slug":"栈和队列","date":"2021-01-18T09:07:06.000Z","updated":"2021-01-18T09:07:06.000Z","comments":true,"path":"2021/01/18/栈和队列/","link":"","permalink":"https://hujiahao.top/2021/01/18/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/","excerpt":"给出一个中缀表达式求前缀表达式和后缀表达式：","text":"给出一个中缀表达式求前缀表达式和后缀表达式： a+bc-(d+e)第一步：按照运算符的优先级对所有的运算单位加括号， 式子变成了：((a+(bc))-(d+e))第二步：转换前缀与后缀表达式 前缀：把运算符号移动到对应的括号前面 则变成了：-( +(a (bc)) +(de)) 把括号去掉：-+abc+de 前缀式子出现 后缀：把运算符号移动到对应的括号后面 则变成了：((a(bc)* )+ (de)+ )- 把括号去掉：abc*+de+- 后缀式子出现 后缀表达式逆向求解中缀表达式 1 2 3 + 4 *5 - + 基本思路和上面的一样：递归，碰到操作符就进入递归。 从左往右扫描先碰到+号，取+号前面两个操作数：2，3 得到：2+3. 继续往下扫碰到号，取4 和2+3 得到：（2+3）4 -号，取（2+3）4和5得到：：（2+3）4-5 +号：取（2+3）4-5和1得到：：1+（2+3）4-5 后缀表达式逆向求解中缀表达式 基本思路和上面的一样,变成从右往左扫描","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"数据结构之树与二叉树","slug":"树与二叉树","date":"2021-01-16T10:43:16.000Z","updated":"2021-01-16T10:43:16.000Z","comments":true,"path":"2021/01/16/树与二叉树/","link":"","permalink":"https://hujiahao.top/2021/01/16/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"树的定义树是一种非线性的数据结构。它是若干结点(A,B,C等都是结点)的集合，是由唯一的根(结点A)和若干棵互不相交的子树(如B,E,F,K,L这5个结点组成的树就是一棵子树)组成的。树的结点数目可以为0，当为0时，这棵树称为空树。 树的基本术语节点的度：树中某个节点的子树的个数。 树的度：树中各节点的度的最大值。 分支节点：度不为零的节点。 叶子节点：度为零的节点。 路径：i-&gt;j；路径长度：路径经过节点数目减1。 孩子节点：某节点的后继节点；双亲节点：该节点为其孩子节点的双亲节点（父母节点）；兄弟节点：同一双亲的孩子节点；子孙节点：某节点所有子树中的节点；祖先节点：从树节点到该节点的路径上的节点。 节点的层次：根节点为第一层（以此类推）；树的高度：树中节点的最大层次。 有序树：树中节点子树按次序从左向右安排，次序不能改变；无序树：与之相反 森林：互不相交的树的集合。 二叉树的定义1.每个结点最多只有两颗子树，即二叉树中结点的度只能为0，1，2。2.子树有左右顺序之分，不能颠倒。 二叉树的主要性质非空二叉树上叶子结点数等于双分支结点数加1 所有结点的分支数等于单分支结点数加上双分支结点数的两倍。 总分支数=总结点数-1 度为m的树中第i层最多有m^(i-1)个节点； 二叉树的第i层上最多有2^(i-1)个结点。 高度(或深度)为k的二叉树最多有2^k -1(k&gt;=1)个结点.换句话说，满二叉树中前k层的结点个数为2^k -1。 几种特殊的二叉树斜树：所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。 满二叉树：在一棵二叉树中。如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。 满二叉树的特点有： 1）叶子只能出现在最下一层。出现在其它层就不可能达成平衡。 2）非叶子结点的度一定是2。 3）在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。 完全二叉树：对一颗具有n个结点的二叉树按层编号，如果编号为i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。 二叉树的遍历前序遍历：中序遍历：后序遍历： 树的遍历 二叉树的遍历算法 二叉树深度优先遍历的递归实现 先序遍历： 123456789101112void preorder(BTNode *p)&#123; if(p!=NULL) &#123; Visit(p) //假设访问函数Visit ()已经定义过， //其中包含了对结点p的各种访问操作， //如可以打印出p对应的数值。 preorder(p-&gt;lchild); preorder(p-&gt;rchild); &#125;&#125; 中序遍历： 123456789101112void inorder(BTNode *p)&#123; if(p!=NULL) &#123; preorder(p-&gt;lchild); Visit(p) //假设访问函数Visit ()已经定义过， //其中包含了对结点p的各种访问操作， //如可以打印出p对应的数值。 preorder(p-&gt;rchild); &#125;&#125; 后序遍历： 123456789101112void postorder(BTNode *p)&#123; if(p!=NULL) &#123; preorder(p-&gt;lchild); preorder(p-&gt;rchild); Visit(p) //假设访问函数Visit ()已经定义过， //其中包含了对结点p的各种访问操作， //如可以打印出p对应的数值。 &#125;&#125; 已知前序遍历序列为A,B,C,D,E,F,中序遍历序列为C,B,A,E,D,F,则后序遍历序列为： 前序：A,B,C,D,E,F中序：C,B,A,E,D,F先看前序遍历序列，则知道A为根结点，再看中序遍历序列，C,B,A,E,D,F ,A左边的为左子树，A右边的为右子树再看前序序列，B为根节点，又因为中序系列中C在B的左边，所以C为B的左子树，再看前序序列，D为根节点，再看中序序列(只需看A的右边)，E,D,F， 显然E为D的左子树，F为D的右子树。则后序遍历序列为CBEFDA 已知后序遍历序列为D,E,C,B,H,G,F,A,中序遍历序列为B,D,C,E,A,F,H,G,则前序遍历序列为： 后序：D,E,C,B,H,G,F,A中序：B,D,C,E,A,F,H,G先看后序遍历序列，则知道A为根结点，再看中序遍历序列，B,D,C,E为A的左子树部分，F,H,G为A的右子树部分,再看后序序列，F为根节点，因为H,G在F的右边，所以，H,G,为F的又子树，再看后序序列，G为根结点，再看中序序列，H在G的左边，所有，H为G的左子树，再看后序序列，B为根结点，再看中序序列，则知DCE为B的右子树部分，再看后序序列，C为根结点，再看中序序列(DCE)，知D为C的左子树，E为C的右子树。则前序遍历序列为：A,B,C,D,E,F,G,H 二叉树遍历算法的改进 二叉树深度优先遍历的非递归实现 …… 赫夫曼树和赫夫曼编码赫夫曼树又叫作最优二叉树，它的特点是带权路径最短。 关于几个路径的概念： 1.路径：路径是指从树中一个结点到另一个结点的分支所构成的路线。2.路径长度：路径长度是指路径上的分支数目。3.树的路径长度：树的路径长度是指从根到每个结点的路径长度之和。4.带权路径长度：结点具有权值，从结点到根之间的路径长度乘以结点的权值，就是该结点的带权路径长度。5.树的带权路径长度(WPL)：树的带权路径长度是指树中所有叶子结点的带权路径长度之和。 构造哈夫曼树 频率表(权值) A：60, B:45, C:13 D:69 E:14 F:5 G:3 第一步：找出字符中最小的两个，小的在左边，大的在右边，组成二叉树。在频率表中删除此次找到的两个数，并加入此次最小两个数的频率和。 F和G最小，因此如图，从字符串频率计数中删除F与G，并返回G与F的和 8给频率表 重复第一步： 频率表 A：60, B:45, C:13 D:69 E:14 FG:8 最小的是 FG：8与C：13，因此如图，并返回FGC的和：21给频率表。 重复第一步： 频率表 A：60 B: 45 D: 69 E: 14 FGC: 21 如图 重复第一步 频率表 A：60 B: 45 D: 69 FGCE: 35 重复第一步 频率表 A：60 D: 69 FGCEB: 80 重复第一步 频率表 AD：129 FGCEB: 80 添加 0 和 1，规则左0 右1 频率表 A：60, B:45, C:13 D:69 E:14 F:5 G:3 每个 字符 的 二进制编码 为（从根节点 数到对应的叶子节点，路径上的值拼接起来就是叶子节点字母的应该的编码） 字符 编码 A 10 B 01 C 0011 D 11 E 000 F 00101 G 00100 那么当我想传送 ABC时，编码为 10 01 0011","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"反射(一)","slug":"反射一","date":"2021-01-16T09:19:08.000Z","updated":"2021-01-16T09:19:08.000Z","comments":true,"path":"2021/01/16/反射一/","link":"","permalink":"https://hujiahao.top/2021/01/16/%E5%8F%8D%E5%B0%84%E4%B8%80/","excerpt":"","text":"Java反射机制的基本概念反射机制是 Java 语言的一个重要特性。在学习 Java 反射机制前，大家应该先了解两个概念，编译期和运行期。 编译期是指把源码交给编译器编译成计算机可以执行的文件的过程。在 Java 中也就是把 Java 代码编成 class 文件的过程。编译期只是做了一些翻译功能，并没有把代码放在内存中运行起来，而只是把代码当成文本进行操作，比如检查错误。 运行期是把编译后的文件交给计算机执行，直到程序运行结束。所谓运行期就把在磁盘中的代码放到内存中执行起来。 Java 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。简单来说，反射机制指的是程序在运行时能够获取自身的信息。在 Java 中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。 Java 反射机制在服务器程序和中间件程序中得到了广泛运用。在服务器端，往往需要根据客户的请求，动态调用某一个对象的特定方法。此外，在 ORM 中间件的实现中，运用 Java 反射机制可以读取任意一个 JavaBean 的所有属性，或者给这些属性赋值。 Java反射机制提供的功能 在运行时判断任意一个对象所属的类 在运行时构造任意一个类的对象 在运行时判断任意一个类所具有的成员变量和方法 在运行时获取泛型信息 在运行时调用任意一个对象的成员变量和方法 在运行时处理注解 生成动态代理 反射初体验12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import org.junit.Test;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;/** * @author HuJiahao * @version 1.0 * @date 2021/1/16 17:07 */public class test &#123; //反射之前，对于Person的操作 @Test public void test1() &#123; //1.创建Person类的对象 Person p1 = new Person(&quot;Tom&quot;, 12); //2.通过对象，调用其内部的属性、方法 p1.age = 10; System.out.println(p1.toString()); p1.show(); //在Person类外部，不可以通过Person类的对象调用其内部私有结构。 //比如：name、showNation()以及私有的构造器 &#125; //反射之后，对于Person的操作 @Test public void test2() throws Exception &#123; Class clazz = Person.class; //1.通过反射，创建Person类的对象 Constructor cons = clazz.getConstructor(String.class, int.class); Object obj = cons.newInstance(&quot;Tom&quot;, 12); Person p = (Person) obj; System.out.println(p.toString()); //2.通过反射，调用对象指定的属性、方法 //调用属性 Field age = clazz.getDeclaredField(&quot;age&quot;); age.set(p, 10); System.out.println(p.toString()); //调用方法 Method show = clazz.getDeclaredMethod(&quot;show&quot;); show.invoke(p); System.out.println(&quot;*******************************&quot;); //通过反射，可以调用Person类的私有结构的。比如：私有的构造器、方法、属性 //调用私有的构造器 Constructor cons1 = clazz.getDeclaredConstructor(String.class); cons1.setAccessible(true); Person p1 = (Person) cons1.newInstance(&quot;Jerry&quot;); System.out.println(p1); //调用私有的属性 Field name = clazz.getDeclaredField(&quot;name&quot;); name.setAccessible(true); name.set(p1, &quot;HanMeimei&quot;); System.out.println(p1); //调用私有的方法 Method showNation = clazz.getDeclaredMethod(&quot;showNation&quot;, String.class); showNation.setAccessible(true); String nation = (String) showNation.invoke(p1, &quot;中国&quot;);//相当于String nation = p1.showNation(&quot;中国&quot;) System.out.println(nation); &#125;&#125;运行结果：Person&#123;name=&#x27;Tom&#x27;, age=12&#125;Person&#123;name=&#x27;Tom&#x27;, age=10&#125;你好，我是一个人*******************************Person&#123;name=&#x27;Jerry&#x27;, age=0&#125;Person&#123;name=&#x27;HanMeimei&#x27;, age=0&#125;我的国籍是：中国中国 Java 反射机制的优缺点优点： 能够运行时动态获取类的实例，大大提高系统的灵活性和扩展性。 与 Java 动态编译相结合，可以实现无比强大的功能。 对于 Java 这种先编译再运行的语言，能够让我们很方便的创建灵活的代码，这些代码可以在运行时装配，无需在组件之间进行源代码的链接，更加容易实现面向对象。 缺点： 反射会消耗一定的系统资源，因此，如果不需要动态地创建一个对象，那么就不需要用反射； 反射调用方法时可以忽略权限检查，获取这个类的私有方法和属性，因此可能会破坏类的封装性而导致安全问题。","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"Mybatis框架","slug":"Mybatis基础学习一","date":"2021-01-13T10:29:51.000Z","updated":"2021-01-13T10:29:51.000Z","comments":true,"path":"2021/01/13/Mybatis基础学习一/","link":"","permalink":"https://hujiahao.top/2021/01/13/Mybatis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/","excerpt":"1.使用Maven来创建一个简单的Mybatis项目2.在pom.xml中添加Mybatis框架所需要依赖的坐标(jar包)","text":"1.使用Maven来创建一个简单的Mybatis项目2.在pom.xml中添加Mybatis框架所需要依赖的坐标(jar包) 12345678910111213141516171819202122232425262728293031323334 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.jiahao&lt;/groupId&gt; &lt;artifactId&gt;day01_easy_01Mybatis&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.12&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.10&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 3.完成主要配置文件的编写(数据库连接和指定映射配置文件的位置[目的是为了不用自己实现数据库查询方法]) 1234567891011121314151617181920212223242526&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;!--配置环境 --&gt; &lt;environments default=&quot;mysql&quot;&gt; &lt;!-- 配置mysql环境--&gt; &lt;environment id=&quot;mysql&quot;&gt; &lt;!--配置事务的类型 --&gt; &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt; &lt;!-- 配置数据源连接池--&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/easy&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/jiahao/dao/IUserDao.xml&quot;&gt;&lt;/mapper&gt; &lt;!-- &lt;mapper class=&quot;com.jiahao.Dao.IUserDao&quot;&gt;&lt;/mapper&gt; --&gt; &lt;/mappers&gt; &lt;/configuration&gt; 4.完成指定映射配置文件的位置，即UserDao.xml 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.jiahao.dao.IUserDao&quot;&gt; &lt;!--配置查询所有--&gt; &lt;select id=&quot;findAll&quot; resultType=&quot;com.jiahao.domain.User&quot;&gt; select * from user &lt;/select&gt;&lt;/mapper&gt; main函数 12345678910111213141516171819202122232425262728293031323334353637package com.jiahao.test;import com.jiahao.dao.IUserDao;import com.jiahao.domain.User;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.InputStream;import java.util.List;/** * @author HuJiahao * @version 1.0 * @date 2021/1/13 18:42 */public class MybatisTest &#123; public static void main(String[] args) throws Exception&#123; //1.读取配置文件 InputStream in = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;); //2.创建SqlsessionFactory工厂 SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(in); //3.使用工厂生产sqlsession SqlSession session = factory.openSession(); //4.使用sqlsessionc创建Dao接口的代理对象 IUserDao userDao = session.getMapper(IUserDao.class); //5.使用代理对象执行方法 List&lt;User&gt; users = userDao.findAll(); for (User user : users)&#123; System.out.println(user); &#125; //6解释资源 session.close(); in.close(); &#125;&#125;","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://hujiahao.top/categories/Mybatis/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"},{"name":"SSM","slug":"SSM","permalink":"https://hujiahao.top/tags/SSM/"},{"name":"Mybatis","slug":"Mybatis","permalink":"https://hujiahao.top/tags/Mybatis/"}]},{"title":"线性表","slug":"线性表","date":"2020-11-18T00:56:55.000Z","updated":"2020-11-18T00:56:55.000Z","comments":true,"path":"2020/11/18/线性表/","link":"","permalink":"https://hujiahao.top/2020/11/18/%E7%BA%BF%E6%80%A7%E8%A1%A8/","excerpt":"线性表是最基本、最简单、也是最常用的一种数据结构。一个线性表是n个具有相同特性的数据元素的有限序列。","text":"线性表是最基本、最简单、也是最常用的一种数据结构。一个线性表是n个具有相同特性的数据元素的有限序列。 前驱元素 若A元素在B元素的前面，则称A为B的前驱元素 后继元素 若B元素在A元素的后面，则称B为A的后继元素 线性表的特征：数据元素之间具有一种“一对一”的逻辑关系。 第一个数据元素没有前驱，这个数据元素被称为头结点； 最后一个数据元素没有后继，这个数据元素被称为尾结点； 除了第一个和最后一个数据元素外，其他数据元素有且仅有一个前驱和一个后继。如果把线性表用数学语言来定义，则可以表示为(a1,…ai-1,ai,ai+1,…an)，ai-1领先于ai,ai领先于ai+1，称ai-1是ai的前驱元素，ai+1是ai的后继元素 线性表的分类： 线性表中数据存储的方式可以是顺序存储，也可以是链式存储，按照数据的存储方式不同，可以把线性表分为顺序表和链表。 顺序表 顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元，依次存储线性表中的各个元素、使得线性表中再逻辑结构上响铃的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系。 顺序表实现顺序表API设计 类名 SequenceList 构造方法 SequenceList(int capacity)：创建容量为capacity的SequenceList对象 成员方法 1.public void clear()：空置线性表 2.publicboolean isEmpty()：判断线性表是否为空，是返回true，否返回false 3.public int length():获取线性表中元素的个数 4.public T get(int i):读取并返回线性表中的第i个元素的值 5.public void insert(int i,T t)：在线性表的第i个元素之前插入一个值为t的数据元素。 6.public void insert(T t):向线性表中添加一个元素t 7.public T remove(int i):删除并返回线性表中第i个数据元素。 8.public int indexOf(T t):返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返 回-1。 成员变 量 1.private T[] eles：存储元素的数组 2.private int N:当前线性表的长度 顺序表代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778package com.jiahao.linear;/** * @author HuJiahao * @version 1.0 * @date 2020/11/16 20:12 */public class SequenceList&lt;T&gt; &#123; //存储元素的数组 private T[] eles; //记录当前顺序表中的元素个数 private int N; //构造方法 public SequenceList(int capacity) &#123; //初始化数组 this.eles = (T[]) new Object[capacity]; this.N = 0; &#125; //将一个线性表置为空表 public void clear() &#123; this.N = 0; &#125; //判断当前线性表是否为空 public boolean isEmpty() &#123; return N == 0; &#125; //获取线性表的元素 public int length() &#123; return N; &#125; //获取指定位置的元素 public T get(int i) &#123; return eles[i]; &#125; //向线性表中添加元素t public void insert(T t) &#123; eles[N++] = t; &#125; //在i元素处插入元素t public void insert(int i, T t) &#123; for (int index = N; index &gt; i; index--) &#123; eles[index] = eles[index - 1]; &#125; eles[i] = t; //表长度增一 N++; &#125; //删除指定位置i的元素，并返回该元素 public T remove(int i) &#123; //记录索引i处的值 T current = eles[i]; //索引i后面的元素依次向前移动一位 for(int index = i;index&lt;N-1;index++)&#123; eles[index]=eles[index+1]; &#125; N--; return current; &#125; //查找t元素第一次出现的位置 public int indexoOf(T t)&#123; for(int i=0;i&lt;N;i++)&#123; if(eles[i].equals(t))&#123; return i; &#125; &#125; return -1; &#125;&#125; 测试类： 1234567891011121314151617181920212223242526272829303132package com.jiahao.linear;/** * @author HuJiahao * @version 1.0 * @date 2020/11/18 16:48 */public class SequenceListTest &#123; public static void main(String[] args) &#123; //创建顺序表对象 SequenceList&lt;String&gt; s1 = new SequenceList&lt;&gt;(10); //测试插入 s1.insert(&quot;科比&quot;); s1.insert(&quot;詹姆斯&quot;); s1.insert(&quot;韦德&quot;); s1.insert(&quot;欧文&quot;); s1.insert(1,&quot;库里&quot;); //测试获取 String result = s1.get(4); System.out.println(&quot;获取索引1处的结果为：&quot;+result); String removeResult = s1.remove(0); System.out.println(&quot;删除的元素是：&quot;+removeResult); s1.clear(); System.out.println(&quot;清空后的线性表中的元素个数&quot;+s1.length()); &#125;&#125;","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"稀疏数组","slug":"稀疏数组","date":"2020-11-07T03:02:57.000Z","updated":"2020-11-07T03:02:57.000Z","comments":true,"path":"2020/11/07/稀疏数组/","link":"","permalink":"https://hujiahao.top/2020/11/07/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/","excerpt":"基本介绍：当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。 稀疏数组的处理方法是:记录数组一共有几行几列，有多少个不同的值把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模","text":"基本介绍：当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。 稀疏数组的处理方法是:记录数组一共有几行几列，有多少个不同的值把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模 demo:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081package com.jiahao.sparsearray;/*** @author HuJiahao* @version 1.0* @date 2020/11/7 16:56*/public class SparseArray &#123; public static void main(String[] args) &#123; int chessArr1[][] = new int [11][11]; chessArr1[1][2] = 1; chessArr1[2][3] = 2; for(int[] row : chessArr1)&#123; for(int data : row)&#123; System.out.printf(&quot;%d\\t&quot;,data); &#125; System.out.println(); &#125; //将二维数组转稀疏数组 //1.先遍历二维数组 得到非0数据的个数 int sum = 0; for (int i = 0; i&lt;chessArr1.length;i++)&#123; for(int j = 0;j&lt;chessArr1.length;j++)&#123; if(chessArr1[i][j]!=0)&#123; sum++; &#125; &#125; &#125; // System.out.println(&quot;sum=&quot;+sum); //2.创建稀疏数组 int SparseArr[][] = new int[sum+1][3]; //给稀疏数组赋值 SparseArr[0][0] = 11; SparseArr[0][1] = 11; SparseArr[0][2] = sum; //遍历二维数组，将非0的值存放到SparseArr int count = 0; for (int i = 0; i&lt;chessArr1.length;i++)&#123; for(int j = 0;j&lt;chessArr1.length;j++)&#123; if(chessArr1[i][j]!=0)&#123; count++; SparseArr[count][0] = i; SparseArr[count][1] = j; SparseArr[count][2] = chessArr1[i][j]; &#125; &#125; &#125; //输出稀疏数组 System.out.println(); System.out.println(&quot;-----得到的稀疏数组为:-----&quot;); for(int i=0;i&lt;SparseArr.length;i++)&#123; System.out.printf(&quot;%d\\t%d\\t%d\\t\\n&quot;,SparseArr[i][0],SparseArr[i][1],SparseArr[i][2]); &#125; System.out.println(); //将稀疏数组恢复成稀疏数组 //1.先读取稀疏数组第一行 ，根据第一行的数据，创建原始的二维数组。 int chessArr2[][] = new int[SparseArr[0][0]][SparseArr[0][1]]; //2.再读取稀疏数组后几行的数据（从第二行开始） 并赋给原始的二维数组即可 for(int i=1;i&lt;SparseArr.length;i++)&#123; chessArr2[SparseArr[i][0]][SparseArr[i][1]] = SparseArr[i][2]; &#125; //输出恢复后的二维数组 System.out.println(); System.out.println(&quot;恢复后的二维数组&quot;); for(int[] row : chessArr2)&#123; for(int data : row)&#123; System.out.printf(&quot;%d\\t&quot;,data); &#125; System.out.println(); &#125; &#125;&#125;","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"数据结构与算法","slug":"数据结构与算法","date":"2020-11-07T02:50:50.000Z","updated":"2020-11-07T02:50:50.000Z","comments":true,"path":"2020/11/07/数据结构与算法/","link":"","permalink":"https://hujiahao.top/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/","excerpt":"线性结构：线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系线性结构有两种不同的存储结构，即顺序存储结构和链式存储结构。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息线性结构常见的有：数组、队列、链表和栈，后面我们会详细讲解.","text":"线性结构：线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系线性结构有两种不同的存储结构，即顺序存储结构和链式存储结构。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息线性结构常见的有：数组、队列、链表和栈，后面我们会详细讲解. 非线性结构：非线性结构包括：二维数组，多维数组，广义表，树结构，图结构 稀疏数组:https://www.hujiahao.top/2020/11/07/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"枚举类","slug":"Enum","date":"2020-07-31T08:39:48.000Z","updated":"2020-07-31T08:39:48.000Z","comments":true,"path":"2020/07/31/Enum/","link":"","permalink":"https://hujiahao.top/2020/07/31/Enum/","excerpt":"","text":"使用 enum 定义的枚举类默认继承了 java.lang.Enum类，因此不能再 继承其他类。 枚举类的构造器只能使用 private 权限修饰符。 枚举类的所有实例必须在枚举类中显式列出(, 分隔 ; 结尾)。列出的 实例系统会自动添加 public static final 修饰 。 必须在枚举类的第一行声明枚举类对象。 1234567891011121314151617181920212223242526272829303132333435public class EnumDemo1 &#123; public static void main(String[] args) &#123; Seanon1 seanon1 = Seanon1.SUMMER; System.out.println(seanon1); Seanon1[] values = Seanon1.values(); for(int i=0;i&lt;values.length;i++)&#123; System.out.println(values[i]); &#125; // valueOf(String object) 返回枚举类中对象名是objName的对象 Seanon1 winter = Seanon1.valueOf(&quot;WINTER&quot;); System.out.println(winter); &#125;&#125;enum Seanon1&#123; SPRING(&quot;春天&quot;,&quot;春暖花开&quot;), SUMMER(&quot;夏天&quot;,&quot;夏日炎炎&quot;), AUTUMN(&quot;秋天&quot;,&quot;秋高气爽&quot;), WINTER(&quot;冬天&quot;,&quot;冰天雪地&quot;); private final String seasonName; private final String seasonDesc; private Seanon1(String seasonName,String seasonDesc)&#123; this.seasonName=seasonName; this.seasonDesc=seasonDesc; &#125; public String getSeasonName()&#123; return seasonName; &#125; public String getSeasonDesc()&#123; return seasonDesc; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"线程通信","slug":"ThreadCommunication","date":"2020-05-03T03:00:02.000Z","updated":"2020-05-03T03:00:02.000Z","comments":true,"path":"2020/05/03/ThreadCommunication/","link":"","permalink":"https://hujiahao.top/2020/05/03/ThreadCommunication/","excerpt":"","text":"涉及到的三个方法：1、 wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。2、 notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。 3、 notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。 说明：1、wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。2、wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。 否则，会出现IllegalMonitorStateException异常3、wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。 sleep() 和 wait()的异同？1、相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。2、不同点：1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。 线程通信的例子：使用两个线程打印 1-100。线程1, 线程2 交替打印 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354class Number implements Runnable&#123; private int number = 1; private Object obj = new Object(); @Override public void run() &#123; while(true)&#123; synchronized (obj) &#123; obj.notify(); if(number &lt;= 100)&#123; try &#123; Thread.sleep(10); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + &quot;:&quot; + number); number++; try &#123; //使得调用如下wait()方法的线程进入阻塞状态 obj.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;else&#123; break; &#125; &#125; &#125; &#125;&#125;public class CommunicationTest &#123; public static void main(String[] args) &#123; Number number = new Number(); Thread t1 = new Thread(number); Thread t2 = new Thread(number); t1.setName(&quot;线程1&quot;); t2.setName(&quot;线程2&quot;); t1.start(); t2.start(); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"解决线程安全问题的方法","slug":"Thread","date":"2020-05-03T01:47:21.000Z","updated":"2020-05-03T01:47:21.000Z","comments":true,"path":"2020/05/03/Thread/","link":"","permalink":"https://hujiahao.top/2020/05/03/Thread/","excerpt":"","text":"一、同步代码块 synchronized(同步监视器){ //需要被同步的代码 } 说明: 1.操作共享数据的代码，即为需要被同步的代码。 –&gt;不能包含代码多了，也不能包含代码少了。 2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。 3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。 要求：多个线程必须要共用同一把锁。 补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。 在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。 1、实现Runnable的方式：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class Window1 implements Runnable&#123; private int ticket = 100;// Object obj = new Object();// Dog dog = new Dog(); @Override public void run() &#123;// Object obj = new Object(); while(true)&#123; synchronized (this)&#123;//此时的this:唯一的Window1的对象 //方式二：synchronized (dog) &#123; if (ticket &gt; 0) &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + &quot;:卖票，票号为：&quot; + ticket); ticket--; &#125; else &#123; break; &#125; &#125; &#125; &#125;&#125;public class WindowTest1 &#123; public static void main(String[] args) &#123; Window1 w = new Window1(); Thread t1 = new Thread(w); Thread t2 = new Thread(w); Thread t3 = new Thread(w); t1.setName(&quot;窗口1&quot;); t2.setName(&quot;窗口2&quot;); t3.setName(&quot;窗口3&quot;); t1.start(); t2.start(); t3.start(); &#125;&#125;class Dog&#123;&#125; 2、继承Thread的方式：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class Window2 extends Thread&#123; private static int ticket = 100; private static Object obj = new Object(); @Override public void run() &#123; while(true)&#123; //正确的// synchronized (obj)&#123; synchronized (Window2.class)&#123;//Class clazz = Window2.class,Window2.class只会加载一次 //错误的方式：this代表着t1,t2,t3三个对象// synchronized (this)&#123; if(ticket &gt; 0)&#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(getName() + &quot;：卖票，票号为：&quot; + ticket); ticket--; &#125;else&#123; break; &#125; &#125; &#125; &#125;&#125;public class WindowTest2 &#123; public static void main(String[] args) &#123; Window2 t1 = new Window2(); Window2 t2 = new Window2(); Window2 t3 = new Window2(); t1.setName(&quot;窗口1&quot;); t2.setName(&quot;窗口2&quot;); t3.setName(&quot;窗口3&quot;); t1.start(); t2.start(); t3.start(); &#125;&#125; 二、同步方法 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。 非静态的同步方法，同步监视器是：this 静态的同步方法，同步监视器是：当前类本身 1、使用同步方法解决实现Runnable接口的线程安全问题:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class Window3 implements Runnable &#123; private int ticket = 100; @Override public void run() &#123; while (true) &#123; show(); &#125; &#125; private synchronized void show()&#123;//同步监视器：this //synchronized (this)&#123; if (ticket &gt; 0) &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + &quot;:卖票，票号为：&quot; + ticket); ticket--; &#125; //&#125; &#125;&#125;public class WindowTest3 &#123; public static void main(String[] args) &#123; Window3 w = new Window3(); Thread t1 = new Thread(w); Thread t2 = new Thread(w); Thread t3 = new Thread(w); t1.setName(&quot;窗口1&quot;); t2.setName(&quot;窗口2&quot;); t3.setName(&quot;窗口3&quot;); t1.start(); t2.start(); t3.start(); &#125;&#125; 2、使用同步方法处理继承Thread类的方式中的线程安全问题:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Window4 extends Thread &#123; private static int ticket = 100; @Override public void run() &#123; while (true) &#123; show(); &#125; &#125; private static synchronized void show()&#123;//同步监视器：Window4.class //private synchronized void show()&#123; //同步监视器：t1,t2,t3。此种解决方式是错误的 if (ticket &gt; 0) &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + &quot;：卖票，票号为：&quot; + ticket); ticket--; &#125; &#125;&#125;public class WindowTest4 &#123; public static void main(String[] args) &#123; Window4 t1 = new Window4(); Window4 t2 = new Window4(); Window4 t3 = new Window4(); t1.setName(&quot;窗口1&quot;); t2.setName(&quot;窗口2&quot;); t3.setName(&quot;窗口3&quot;); t1.start(); t2.start(); t3.start(); &#125;&#125; 三、Lock锁 — JDK5.0新增synchronized 与 Lock的异同？相同：二者都可以解决线程安全问题不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器 Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Window implements Runnable&#123; private int ticket = 100; //1.实例化ReentrantLock private ReentrantLock lock = new ReentrantLock(); @Override public void run() &#123; while(true)&#123; try&#123; //2.调用锁定方法lock() lock.lock(); if(ticket &gt; 0)&#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + &quot;：售票，票号为：&quot; + ticket); ticket--; &#125;else&#123; break; &#125; &#125;finally &#123; //3.调用解锁方法：unlock() lock.unlock(); &#125; &#125; &#125;&#125;public class LockTest &#123; public static void main(String[] args) &#123; Window w = new Window(); Thread t1 = new Thread(w); Thread t2 = new Thread(w); Thread t3 = new Thread(w); t1.setName(&quot;窗口1&quot;); t2.setName(&quot;窗口2&quot;); t3.setName(&quot;窗口3&quot;); t1.start(); t2.start(); t3.start(); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"单例设计模式","slug":"单例设计模式","date":"2020-04-15T15:37:48.000Z","updated":"2020-04-15T15:37:48.000Z","comments":true,"path":"2020/04/15/单例设计模式/","link":"","permalink":"https://hujiahao.top/2020/04/15/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。","text":"所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。 如何实现？饿汉式 和 懒汉式 区分饿汉式 和 懒汉式饿汉式：坏处：对象加载时间过长。好处：饿汉式是线程安全的 懒汉式：好处：延迟对象的创建。坏处：不加线程锁是不安全的 饿汉式：1234567891011121314151617181920212223242526272829public class SingletonTest1 &#123; public static void main(String[] args) &#123; // Bank bank1 = new Bank(); // Bank bank2 = new Bank(); Bank bank1 = Bank.getInstance(); Bank bank2 = Bank.getInstance(); System.out.println(bank1 == bank2);//true &#125;&#125;//饿汉式class Bank&#123; //1.私有化类的构造器 private Bank()&#123; &#125; //2.内部创建类的对象 //4.要求此对象也必须声明为静态的 private static Bank instance = new Bank(); //3.提供公共的静态的方法，返回类的对象 public static Bank getInstance()&#123; return instance; &#125;&#125; 懒汉式：第一种：线程不安全1234567891011121314151617181920212223242526272829303132333435public class SingletonTest2 &#123; public static void main(String[] args) &#123; Order order1 = Order.getInstance(); Order order2 = Order.getInstance(); System.out.println(order1 == order2); &#125;&#125;class Order&#123; //1.私有化类的构造器 private Order()&#123; &#125; //2.声明当前类对象，没有初始化 //4.此对象也必须声明为static的 private static Order instance = null; //3.声明public、static的返回当前类对象的方法 public static Order getInstance()&#123; if(instance == null)&#123; instance = new Order(); &#125; return instance; &#125; &#125; 第二种：线程安全123456789101112131415161718192021222324252627282930313233343536373839404142public class ThreadSingle &#123; public static void main(String[] args) &#123; Order order1 = Order.getInstance(); Order order2 = Order.getInstance(); System.out.println(order1 == order2); &#125;&#125;class Order&#123; //1.私有化类的构造器 private Order()&#123; &#125; //2.声明当前类对象，没有初始化 //4.此对象也必须声明为static的 private static Order instance = null; //3.声明public、static的返回当前类对象的方法 public static Order getInstance() &#123; if(instance==null) &#123; synchronized (Order.class) &#123; if (instance == null) &#123; instance = new Order(); &#125; &#125; &#125; return instance; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"Object类","slug":"Object类","date":"2020-04-14T14:25:43.000Z","updated":"2020-04-14T14:25:43.000Z","comments":true,"path":"2020/04/14/Object类/","link":"","permalink":"https://hujiahao.top/2020/04/14/Object%E7%B1%BB/","excerpt":"Object类是所有Java类的根父类 ,如果在类的声明中未使用extends关键字指明其父类，则默认父类 为java.lang.Object类","text":"Object类是所有Java类的根父类 ,如果在类的声明中未使用extends关键字指明其父类，则默认父类 为java.lang.Object类 Object类中的主要结构“==”和equals的区别 == 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型 就是比较内存地址 equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也 是==;我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中 用的比较多，久而久之，形成了equals是比较值的错误观点。 具体要看自定义类里有没有重写Object的equals方法来判断。 通常情况下，重写equals方法，会比较类中的相应属性是否都相等 equal重写例子： 123456789101112131415 public boolean equals(Object o) &#123; System.out.println(&quot;equals重写&quot;); if(o==this) &#123; return true; &#125;if(o instanceof Customer) &#123; Customer cu = (Customer)o; if(cu.age==this.age&amp;&amp;cu.name.equals(this.name)) &#123; return true; &#125;else &#123; return false; &#125; &#125;else &#123; return false; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"java的三大特征","slug":"java的三大特征","date":"2020-04-14T03:02:51.000Z","updated":"2020-04-14T03:02:51.000Z","comments":true,"path":"2020/04/14/java的三大特征/","link":"","permalink":"https://hujiahao.top/2020/04/14/java%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/","excerpt":"封装性，继承性和多态性","text":"封装性，继承性和多态性 封装性 我们程序设计追求“高内聚，低耦合”。 高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉 低耦合 ：仅对外暴露少量的方法用于使用 隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提 高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露 的暴露出来。这就是封装性的设计思想。 Java中通过将数据声明为私有的(private)，再提供公共的（public） 方法:getXxx()和setXxx()实现对该属性的操作，以实现下述目的： 隐藏一个类中不需要对外提供的实现细节； 使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑， 限制对属性的不合理操作； 便于修改，增强代码的可维护性； 继承性 为什么要有继承？ 多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中， 那么多个类无需再定义这些属性和行为，只要继承那个类即可。 此处的多个类称为子类(派生类)，单独的这个类称为父类(基类 或超类)。 类继承语法规则: class Subclass extends SuperClass{ } 继承的作用： 继承的出现减少了代码冗余，提高了代码的复用性。 继承的出现，更有利于功能的扩展。 继承的出现让类与类之间产生了关系，提供了多态的前提。 子类继承了父类，就继承了父类的方法和属性。 在子类中，可以使用父类中定义的方法和属性，也可以创建新的数据和 方法。 在Java 中，继承的关键字用的是“extends”，即子类不是父类的子集， 而是对父类的“扩展”。 注意： 不要仅为了获取其他类中某个功能而去继承 。 子类不能直接访问父类中私有的(private)的成员变量和方法。 Java只支持单继承和多层继承，不允许多重继承 , 一个子类只能有一个父类 ， 一个父类可以派生出多个子类 12class SubDemo extends Demo&#123; &#125; //ok class SubDemo extends Demo1,Demo2...//error 继承举例： 1234567891011class Person &#123; public String name; public int age; public Date birthDate; public String getInfo() &#123; // ... &#125;&#125;class Student extends Person &#123; public String school;&#125; 多态性(向上转型) 对象的多态性：父类的引用指向子类的对象 可以直接应用在抽象类和接口上 Java引用变量有两个类型：编译时类型和运行时类型。编译时类型由声明 该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。简 称：编译时，看左边；运行时，看右边。 若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)多态情况下，“看左边”：看的是父类的引用(父类中不具备子类特有的方法),“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法） 对象的多态 ——— 在Java中,子类的对象可以替代父类的对象使用 一个变量只能有一种确定的数据类型 一个引用类型变量可能指向(引用)多种不同类型的对象 123Person p = new Student(); Object o = new Person();//Object类型的变量o，指向Person类型的对象 o = new Student(); //Object类型的变量o，指向Student类型的对象 子类可看做是特殊的父类，所以父类类型的引用可以指向子类的对象：向上转型(upcasting)。 一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法 1234Student m = new Student();m.school = “pku”; //合法,Student类有school成员变量 Person e = new Student();e.school = “pku”; //非法,Person类没有school成员变量 属性是在编译时确定的，编译时e为Person类型，没有school成员变量，因而编译错误。不能调用子类特有的方法（父类特有的方法可以调用） 多态的使用： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class AnimalTest &#123; public static void main(String[] args) &#123; AnimalTest animaltest = new AnimalTest(); animaltest.func(new dog()); animaltest.func(new cat()); /* * Animal animal = new dog(); * animal.eat(); * animal.shout(); */ &#125; public void func(Animal animal) &#123; animal.eat(); animal.shout(); &#125; &#125;class Animal&#123; public void eat() &#123; System.out.println(&quot;动物，进食&quot;); &#125; public void shout() &#123; System.out.println(&quot;动物，叫&quot;); &#125;&#125;class dog extends Animal&#123; public void eat() &#123; System.out.println(&quot;吃狗粮&quot;); &#125; public void shout() &#123; System.out.println(&quot;汪汪汪&quot;); &#125; //狗类特有的方法 public void play()&#123; System.out.println(&quot;玩&quot;); &#125;&#125;class cat extends Animal&#123; public void eat() &#123; System.out.println(&quot;吃老鼠&quot;); &#125; public void shout() &#123; System.out.println(&quot;喵喵喵&quot;); &#125; //猫类特有的方法 public void sleep() &#123; System.out.println(&quot;睡觉&quot;); &#125;&#125; 面试题：多态是编译时行为还是运行时行为 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 //面试题：多态是编译时行为还是运行时行为？ //证明如下：class Animal &#123; protected void eat() &#123; System.out.println(&quot;animal eat food&quot;); &#125;&#125;class Cat extends Animal &#123; protected void eat() &#123; System.out.println(&quot;cat eat fish&quot;); &#125;&#125;class Dog extends Animal &#123; public void eat() &#123; System.out.println(&quot;Dog eat bone&quot;); &#125;&#125;class Sheep extends Animal &#123; public void eat() &#123; System.out.println(&quot;Sheep eat grass&quot;); &#125; &#125;public class InterviewTest &#123; public static Animal getInstance(int key) &#123; switch (key) &#123; case 0: return new Cat (); case 1: return new Dog (); default: return new Sheep (); &#125; &#125; public static void main(String[] args) &#123; int key = new Random().nextInt(3); System.out.println(key); Animal animal = getInstance(key); animal.eat(); &#125;&#125; 向下转型： 如何才能调用子类特有的属性和方法？向下转型：使用强制类型转换符。 123Animal animal = new dog();dog d = (dog)animal;d.play(); 使用强转时，可能出现ClassCastException的异常。 123Animal animal = new dog();// cat d = (cat)animal;// d.sleep(); 为了防止向下转型时出现ClassCastException的异常，使用instanceof关键字 。 a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。 如果 a instanceof A返回true,则 a instanceof B也返回true，其中，类B是类A的父类。 12345678910111213141516171819202122 //instanceof的使用： Animal animal = new dog(); if(animal instanceof dog)&#123; dog d1 = (dog)animal; d1.play(); System.out.println(&quot;====狗====&quot;);&#125;if(animal instanceof cat) &#123; cat c = (cat)animal; c.sleep(); System.out.println(&quot;====猫====&quot;);&#125;if(animal instanceof Animal) &#123; System.out.println(&quot;====Animal====&quot;);&#125;if(animal instanceof Object) &#123; System.out.println(&quot;====Object====&quot;);&#125; /* 输出： ====狗==== ====Animal==== ====Object==== */","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"方法重写和重载","slug":"方法重写和重载","date":"2020-04-14T03:02:10.000Z","updated":"2020-04-14T03:02:10.000Z","comments":true,"path":"2020/04/14/方法重写和重载/","link":"","permalink":"https://hujiahao.top/2020/04/14/%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD/","excerpt":"方法重写和重载的区别","text":"方法重写和重载的区别 方法的重写： 定义：在子类中可以根据需要对从父类中继承来的方法进行改造，也称 为方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。 要求： 子类重写的方法必须和父类被重写的方法具有相同的方法名称、参数列表 子类重写的方法的返回值类型不能大于父类被重写的方法的返回值类型 子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限 子类不能重写父类中声明为private权限的方法 子类方法抛出的异常不能大于父类被重写方法的异常 注意：子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为 static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。 举例1： 1234567891011121314151617public class Person &#123; public String name; public int age; public String getInfo() &#123; return &quot;Name: &quot;+ name + &quot;\\n&quot; +&quot;age: &quot;+ age; &#125; &#125; public class Student extends Person &#123; public String school; public String getInfo() &#123; //重写方法 return &quot;Name: &quot;+ name + &quot;\\nage: &quot;+ age + &quot;\\nschool: &quot;+ school; &#125; public static void main(String args[])&#123; Student s1=new Student(); s1.name=&quot;Bob&quot;; s1.age=20; s1.school=&quot;school2&quot;; System.out.println(s1.getInfo()); //Name:Bob age:20 school:school2 &#125; &#125; 举例2： 123456789101112131415class Parent &#123; public void method1() &#123;&#125; &#125;class Child extends Parent &#123; //非法，子类中的method1()的访问权限private比被覆盖方法的访问权限public小 private void method1() &#123;&#125; &#125;public class UseBoth &#123; public static void main(String[] args) &#123; Parent p1 = new Parent(); Child c1 = new Child(); p1.method1(); c1.method1();&#125; &#125; 方法的重载:必须就有不同的参数列表；可以有不同的返回类型；可以有不同的访问修饰符；可以抛出不同的异常； 举例： 12345678 public class Demo&#123; void speak()&#123; System.out.println(&quot;重载方法&quot;); &#125; void speak(int a)&#123; System.out.println(a); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"英语动词短语和固定搭配","slug":"英语动词短语","date":"2020-04-07T11:28:57.000Z","updated":"2020-04-07T11:28:57.000Z","comments":true,"path":"2020/04/07/英语动词短语/","link":"","permalink":"https://hujiahao.top/2020/04/07/%E8%8B%B1%E8%AF%AD%E5%8A%A8%E8%AF%8D%E7%9F%AD%E8%AF%AD/","excerpt":"常考的动词短语和固定搭配… 常考动词搭配：","text":"常考的动词短语和固定搭配… 常考动词搭配： run across run after run away run away from run down run into run out of run over run through ruan up against bring about bring along bring back bring down bring forword bring in bring into effect bring off bring on bring out bring to bring up agree on agree to agree with agtee about 固定搭配 be particular about 挑剔 remind sb of sth. 使某人想起某事 remind sb to do sth. 提醒某人做某事 remember to do sth. 记得要去做某事 remember doing sth. 记得曾经做过某事 come to the conclusion 得出结论 reach a conclusion 得出结论 arrive at a conclusion 得出结论 make one’s a fortune 发财 see the point of 理解，领会 leave a deep impression on sb. 给某人留下深刻的印象 reach (no) agreement (没有)达成一致意见 compensate sb for sth. meet the need of 满足……需要 it occurred to sb. that 某人突然想起 yield to sb 向某人让步，屈服 have access to 使用，接近，可以利用 forbidden sb. to do sth.禁止某人做某事 prevent sb from doing sth.阻止某人做某事 be involved in 全身心投入 range from to 在范围内变化 bargain with sb about/over/for sth. 和某人讨价还价 encourage sb to do sth. 鼓励某人做某事 approach to …..的方法 burst into tears 突然大哭 attach importance to doing sth.重视…对什么给予重视","categories":[{"name":"English","slug":"English","permalink":"https://hujiahao.top/categories/English/"}],"tags":[{"name":"English","slug":"English","permalink":"https://hujiahao.top/tags/English/"},{"name":"动词短语","slug":"动词短语","permalink":"https://hujiahao.top/tags/%E5%8A%A8%E8%AF%8D%E7%9F%AD%E8%AF%AD/"},{"name":"固定搭配","slug":"固定搭配","permalink":"https://hujiahao.top/tags/%E5%9B%BA%E5%AE%9A%E6%90%AD%E9%85%8D/"}]},{"title":"数组基础","slug":"数组基础","date":"2020-04-05T14:27:38.000Z","updated":"2020-04-05T14:27:38.000Z","comments":true,"path":"2020/04/05/数组基础/","link":"","permalink":"https://hujiahao.top/2020/04/05/%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80/","excerpt":"关于一维数组和二维数组学习笔记","text":"关于一维数组和二维数组学习笔记 一维数组的声明和初始化 静态初始化：数组的初始化和数组元素的赋值操作同时操作 12int[] ids;ids &#x3D; new int[]&#123;12,87,24,88,39&#125;; 或 int[] ids={23,25,11,8} 动态初始化：数组的初始化和数组元素的赋值操作分开进行 Sring[] name = new String[5]; 数组元素的默认初始化： 一维数组的简化内存结构： 二维数组的声明和初始化数组元素初始化值针对初始化方式一：比如：int [][] arr = new int[4][3];外层元素的初始化值为：地址值内层元素的初始化值为：与一维数组初始化情况相同 针对初始化方式二：比如：int[][] arr = new int[4][];外层元素的初始化值为：null内层元素的初始化值为：不能调用，否则报错 1234567891011121314151617public static void main(String[] args) &#123; int[][] arr&#x3D;new int[4][3]; System.out.println(arr[0]);&#x2F;&#x2F;[I@1540e19d System.out.println(arr[0][0]);&#x2F;&#x2F;0 System.out.println(arr);&#x2F;&#x2F;[[I@677327b6 System.out.println(&quot;-------------&quot;); String[][] arr2&#x3D;new String[4][2]; System.out.println(arr2[1]);&#x2F;&#x2F;[Ljava.lang.String;@14ae5a5 System.out.println(arr2[1][1]);&#x2F;&#x2F;null System.out.println(&quot;-------------&quot;); String[][] arr3&#x3D;new String[4][]; System.out.println(arr3[1]);&#x2F;&#x2F;null System.out.println(arr3[1][0]);&#x2F;&#x2F;空指针异常&#125; 二维数组的遍历123456int[][] array &#x3D; new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;;for(int i&#x3D;0;i&lt;arr.length;i++)&#123; for(int j&#x3D;0;j&lt;array[i].length;j++)&#123; System.out.println(array[i][j]); &#125;&#125; 二维数组的内存解析 杨辉三角123456789101112131415 int[][] arr2 &#x3D; new int[10][];for(int i&#x3D;0;i&lt;arr2.length;i++) &#123; arr2[i]&#x3D;new int[i+1]; arr2[i][0]&#x3D;arr2[i][i]&#x3D;1; for(int j&#x3D;1;j&lt;arr2[i].length -1;j++) &#123; arr2[i][j]&#x3D;arr2[i-1][j]+arr2[i-1][j-1]; &#125;&#125;for(int i&#x3D;0;i&lt;arr2.length;i++) &#123; for(int j&#x3D;0;j&lt;arr2[i].length;j++) &#123; System.out.print(arr2[i][j]+&quot; &quot;); &#125; System.out.println();&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"}]},{"title":"数组常用算法","slug":"数组","date":"2020-04-04T14:13:25.000Z","updated":"2020-04-04T14:13:25.000Z","comments":true,"path":"2020/04/04/数组/","link":"","permalink":"https://hujiahao.top/2020/04/04/%E6%95%B0%E7%BB%84/","excerpt":"数组的常用查找和排序算法","text":"数组的常用查找和排序算法 线性查找12345678910111213141516171819&#x2F;&#x2F;线性查找：String dest &#x3D; &quot;BB&quot;;dest &#x3D; &quot;CC&quot;;boolean isFlag &#x3D; true;for(int i &#x3D; 0;i &lt; arr.length;i++)&#123; if(dest.equals(arr[i]))&#123; System.out.println(&quot;找到了指定的元素，位置为：&quot; + i); isFlag &#x3D; false; break; &#125; &#125;if(isFlag)&#123; System.out.println(&quot;很遗憾，没有找到的啦！&quot;); &#125; 二分法查找123456789101112131415161718192021222324252627282930&#x2F;&#x2F;二分法查找：&#x2F;&#x2F;前提：所要查找的数组必须有序。int[] arr2 &#x3D; new int[]&#123;-98,-34,2,34,54,66,79,105,210,333&#125;;int dest1 &#x3D; -34;dest1 &#x3D; 35;int head &#x3D; 0;&#x2F;&#x2F;初始的首索引int end &#x3D; arr2.length - 1;&#x2F;&#x2F;初始的末索引boolean isFlag1 &#x3D; true;while(head &lt;&#x3D; end)&#123; int middle &#x3D; (head + end)&#x2F;2; if(dest1 &#x3D;&#x3D; arr2[middle])&#123; System.out.println(&quot;找到了指定的元素，位置为：&quot; + middle); isFlag1 &#x3D; false; break; &#125;else if(arr2[middle] &gt; dest1)&#123; end &#x3D; middle - 1; &#125;else&#123;&#x2F;&#x2F;arr2[middle] &lt; dest1 head &#x3D; middle + 1; &#125; &#125;if(isFlag1)&#123; System.out.println(&quot;很遗憾，没有找到的啦！&quot;);&#125; 冒泡排序1234567891011121314151617int[] arr &#x3D; new int[]&#123;43,32,76,-98,0,64,33,-21,32,99&#125;;&#x2F;&#x2F;冒泡排序for(int i &#x3D; 0;i &lt; arr.length - 1;i++)&#123; for(int j &#x3D; 0;j &lt; arr.length - 1 - i;j++)&#123; if(arr[j] &gt; arr[j + 1])&#123; int temp &#x3D; arr[j]; arr[j] &#x3D; arr[j + 1]; arr[j + 1] &#x3D; temp; &#125; &#125; &#125; for(int i &#x3D; 0;i &lt; arr.length;i++)&#123; System.out.print(arr[i] + &quot;\\t&quot;);&#125; 快速排序(sort排序)要想对数值型数组进行快速排序， 可以使用 Arrays 类中的 sort 方法： 12int[] a &#x3D; new int[10000];Arrays.sort(a) 这个方法使用了优化的快速排序算法。快速排序算法对于大多数数据集合来说都是效率比较高的 抽彩游戏中的随机数值组合，假如抽彩是从 49 个数值中抽取 6 个，那么程序可能的输出结果为： 1234567891011121314151617181920212223242526272829 import java.util.Arrays; import java.util.Scanner; public class shuzu &#123; public static void main(String[] args) &#123; Scanner in &#x3D; new Scanner(System.in); System.out.print(&quot;你想要从多少个数里面抽? &quot;); int n &#x3D; in.nextInt(); System.out.println(&quot;你想要抽几个数？&quot;); int k &#x3D;in.nextInt(); int[] number &#x3D; new int[n]; for(int i&#x3D;0;i&lt;number.length;i++)&#123; number[i]&#x3D;i+1; &#125; int[] result &#x3D; new int[k]; for (int i&#x3D;0;i&lt;result.length;i++)&#123; int r&#x3D;(int)(Math.random()*n); result[i]&#x3D;number[r]; number[r]&#x3D;number[n-1]; n--; System.out.println(n); &#125; Arrays.sort(result); System.out.println(&quot;Bet the following combination. I&quot;); for(int r:result) System.out.println(r); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"},{"name":"算法","slug":"算法","permalink":"https://hujiahao.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"非谓语动词","slug":"非谓语动词","date":"2020-04-02T12:15:00.000Z","updated":"2020-04-02T12:15:00.000Z","comments":true,"path":"2020/04/02/非谓语动词/","link":"","permalink":"https://hujiahao.top/2020/04/02/%E9%9D%9E%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/","excerpt":"总结一下非谓语动词……","text":"总结一下非谓语动词…… 主动 被动 一般式 进行式 完成式 一般式 完成式 不定式 to do to be doing to have done to be done to have been done 动名词 doing ———— having done being done having been done 现在分词 doing ———— having done being done being been done 过去分词 done ———— ———— ———— ———— 固定搭配： It is/was + 名词 + to do sth. 做某事是…… (it为形式主语，真正的主语是后面的不定式（短语）) arrange for sb to do sth. 安排某人做某事。 go on to do sth. 做完一件事后继续做另一件事。 go on doing sth. 继续做正在做的事。 have sth. done 某事被做 have sb do sth. 某人做某事 be wothy of be woth doing 动名词名主动表被动 keep sb informed of sth. 及时通知某人 practice dong sth.练习做某事 be supposed to do sth. 计划做某事 leave for 动身去 leave + 宾语 + doing 让某人或某物处于某种状态 leave + sb to do sth. 让某人去做某事 leave sb doing sth. 让某人一直做某事 leave sb + 形容词 让某人保持一种状态 allow sb to do sth 允许某人做某事 allow doing sth 允许做某事 look forward to doing sth. 期望做某事 avoid doing sth. 避免做某事 catch sb dong sth. 抓住某人正在做某事 sb. spend some money/time (in) doing sth. spend some money/some time on sth. It takes (sb.) some time to do sth. 或 sth. take (sb.) some time it cost (sb.) some money to do sth. sb pay some money for sth. only to + 不定式 表示一种出乎意料或非主关希望的结果 It’s no use (no good,no help,fun,a waste time) + doing It做形式主语，真正的主语是后面的动名词(短语) enjoy doing sth 喜欢做某事 pretend to do sth. 假装做某事 mind doing sth 介意做某事 make oneself done 使自己被(别人)。。。。。。 sb./sth. + be动词 + said/thought/reported/believed/supposed…+to do相当于 It is/was said/thought/reported/believed/supposed…+that… confess to doing sth. 承认做某事 appreciate doing sth 感激做某事 suggest doing sth 建议做某事 keep sth done 让某事被做 insist on doing sth 坚持做某事 hate to do sth. happen to do sth. astonish to do sth. 对做某事吃惊 frightened to do sth. 害怕做某事 delighted to do sth. 乐于做某事 risk doing sth. 冒险做某事 be devoted to doing sth. 专心于/致力于做某事 be/get used to doing sth.习惯于做某事 be used to do sth 被用来做某事 used to do sth 过去常常做某事 have a hard time (in) doing sth. 做某事有困难 不定式 有些动词长跟不定式做宾语。这些动词有： afford,agree,aim,arrange,ask,attempt,begin,claim,continue,decide,demand,desire,determine,expect,fail,forget,happen,hate,hesite,hope,intend,learn,like,love,manage,mean,offer,plan,prepare,pretend,promise,prove,refuse,seem,start,try,undertake,want,wish等 奇思秒记： 动词不定做宾语，期希渴欲下决心。 愿望碰巧承担起，假装安排不拒绝。 准备计划却失败，好像提供又犹豫。 企图要把目标证，爱恨要求做选择。 同意试图要忘记，声称继续要学习。 设法想要去承诺，开始询问做绝定。 动名词 以下及物动词和动词短语常用动名词作宾语，而不能用动词不定式作宾语: admit,advise,advocate,allow,appreciate,avoid,consider,delay,deny,discuss,dislike, enjoy,escape,finish,imagine,keep,mind,miss,permit,postpone,practise,prevent,quit, recall,resent,resist,risk,suggest,tolerate,can’t help(禁不住)等 奇思妙计: 愤恨讨论停止作，阻止抵抗否避开。 建议考虑坚持练，允许想象不冒险。 不禁介意保持完，承认错过心喜欢。 回忆感激又逃避，厌恶容许又延期。 即可用动名词又可用不定式 forget to do sth. 忘记要去做某事 forget doing sth. 忘记已做过某事 go on to do sth. 做完一件事后继而做另一件事 go on doing sth. 继续做一直在做的事 mean to do sth. 打算去做某事 mean doing sth. 意味着做某事 regret to do sth. 因将要去做某事而感到遗憾 regret doing sth. 因做了某事而后悔 remember to do sth. 记得要去做某事 remember doing sth. 记得曾经做过某事 stop to do sth. 停下手中的事去做其他的事 stop doing sth.停下手中正在做的事 try to do sth. 努力去做某事 try doing sth. 试着做某事 can’t help(to) do sth. 不能帮助做某事 can’t help doing sth. 禁不住做某事","categories":[{"name":"English","slug":"English","permalink":"https://hujiahao.top/categories/English/"}],"tags":[{"name":"English","slug":"English","permalink":"https://hujiahao.top/tags/English/"},{"name":"非谓语动词","slug":"非谓语动词","permalink":"https://hujiahao.top/tags/%E9%9D%9E%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/"}]},{"title":"hexo主题Icarus浅度修改教程","slug":"hexo的一些配置问题","date":"2020-04-02T02:19:50.000Z","updated":"2020-04-02T02:19:50.000Z","comments":true,"path":"2020/04/02/hexo的一些配置问题/","link":"","permalink":"https://hujiahao.top/2020/04/02/hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/","excerpt":"1.取消不需要的侧边栏widgets 这里其实很简简单，可能有些同学直接注释的时候发现在部署的时候可能会出错，其实是因为注释需要将开头的符号【 - 】 也一起注释掉","text":"1.取消不需要的侧边栏widgets 这里其实很简简单，可能有些同学直接注释的时候发现在部署的时候可能会出错，其实是因为注释需要将开头的符号【 - 】 也一起注释掉 - #这个不注释的话可能会出现错误123456789101112131415# # Widget name# type: tagcloud# # Where should the widget be placed, left or right# position: left# -# # Widget name# type: archive# # Where should the widget be placed, left or right# position: left# -# # Widget name# type: tag# # Where should the widget be placed, left or right# position: left 2.解决Hexo博客文章置顶问题Hexo默认只提供了按发布日期的排序，只好网上找了些资料修改。 原理：在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能。 修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js，在生成文章之前进行文章top值排序。 需添加的代码： 1234567891011121314 posts.data &#x3D; posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; &#x2F;&#x2F; 两篇文章top都有定义 if(a.top &#x3D;&#x3D; b.top) return b.date - a.date; &#x2F;&#x2F; 若top值一样则按照文章日期降序排 else return b.top - a.top; &#x2F;&#x2F; 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; &#x2F;&#x2F; 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; &#x2F;&#x2F; 都没定义按照文章日期降序排&#125;); 修改完成后，只需要在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序top值越大越靠前。需要注意的是，这个文件不是主题的一部分，也不是Git管理的，备份的时候比较容易忽略。 123456789101112131415161718192021222324252627282930313233&#39;use strict&#39;;var pagination &#x3D; require(&#39;hexo-pagination&#39;);module.exports &#x3D; function(locals) &#123; var config &#x3D; this.config; var posts &#x3D; locals.posts.sort(config.index_generator.order_by); posts.data &#x3D; posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; if(a.top &#x3D;&#x3D; b.top) return b.date - a.date; else return b.top - a.top; &#125; else if(a.top &amp;&amp; !b.top) &#123; return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; &#125;); var paginationDir &#x3D; config.pagination_dir || &#39;page&#39;; return pagination(&#39;&#39;, posts, &#123; perPage: config.index_generator.per_page, layout: [&#39;index&#39;, &#39;archive&#39;], format: paginationDir + &#39;&#x2F;%d&#x2F;&#39;, data: &#123; __index: true &#125; &#125;);&#125;; 3.背景添加动态线条效果 在 \\Hexo\\themes\\icarus\\layout\\layout.ejs 文件中(最下面)添加如下代码： 123&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;color&#x3D;&quot;220,220,220&quot; opacity&#x3D;&#39;0.7&#39; zIndex&#x3D;&quot;-2&quot; count&#x3D;&quot;200&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;&lt;&#x2F;script&gt; 其中： color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0） opacity：表示线条透明度（0~1），默认：0.5 count：表示线条的总数量，默认：150 zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1 4.侧边栏“最新文章”栏这个东西啊，个人感觉真的没什么实用性。可以把它改成类似于优秀文章推广之类的，就比较好了。打开\\icarus\\layout\\widget\\recent_posts.locals.js 找到： 1const _posts &#x3D; posts.sort(&#39;date&#39;, -1).limit(5).map(post &#x3D;&gt; 改成 1const _posts &#x3D; posts.sort(&#39;priority&#39;, -1).limit(5).map(post &#x3D;&gt; 然后只需要在每篇文章上面的配置里加上priority: xxx，其中xxx是你自由确定的优先级（1,2,3之类的数字），就可以自由更改显示在那里的文章了。 当然也可以调整显示在那里的文章数量，像这样： 1const _posts &#x3D; posts.sort(&#39;priority&#39;, -1).limit(10).map(post &#x3D;&gt; 就是显示10篇文章。10也可以改成其它数字。 然后更改栏目名称。打开\\icarus\\languages\\zh-CN.yml，找到： 1recents: &#39;最新文章&#39; 一句，把“最新文章”替换成“阅读推荐”就好了。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","permalink":"https://hujiahao.top/tags/Icarus/"}]},{"title":"英语短句","slug":"英语短句","date":"2020-03-30T23:13:02.000Z","updated":"2020-03-30T23:13:02.000Z","comments":true,"path":"2020/03/31/英语短句/","link":"","permalink":"https://hujiahao.top/2020/03/31/%E8%8B%B1%E8%AF%AD%E7%9F%AD%E5%8F%A5/","excerpt":"背单词时摘抄的一些短句…","text":"背单词时摘抄的一些短句… You want to resign from the police force. 你是想让我辞去警察部门的职务。 This argument has prevailed in America’s courts. 这种论调在美国法庭中流行开来。 Rebel groups prepared for a fight. 反叛政府组织则为战斗做好了准备。 I can’t reverse the process. 我无法让这个过程逆转。 I pinch myself because I don’t believe it’s true. 我掐一下自己，因为我不相信这是真的。 Blood tests reveal that the victim is male. 血液检测表明受害人是男性。 Falling tax revenues are a problem. 政府税收收入不断减少是个麻烦。 We had to restrick the number of student on this course. 我们必须限制这门课程的选修人数。 This meat is still raw. 这肉是生的。 No revisions to the agreement? 协议内容没有改动吧？ The sun’s rays are very strong. 这太阳光太强了。 Violen revolt is an American value. 暴力反抗是美式价值观。 He fought in the Amercian Revolution. 他参加了美国革命。 It’s important to build regular exercise into your daily routine. 将定期锻炼融入你的日常生活很重要。 Enough! I’v endured this long enough. 够了！ 我忍很久了。 Dont’t dare let all these memories bring you sorrow? 你不怕这些记忆会给你带来悲伤吗？ Mary and I both conclude he wished you to marry him. 玛丽和我都断定他希望你嫁给他。 Is your passport valid? 你的护照是否有效","categories":[{"name":"English","slug":"English","permalink":"https://hujiahao.top/categories/English/"}],"tags":[{"name":"English","slug":"English","permalink":"https://hujiahao.top/tags/English/"}]},{"title":"Hexo站点配置文件详解","slug":"Hexo站点配置详解","date":"2020-03-30T06:35:18.000Z","updated":"2020-03-30T06:35:18.000Z","comments":true,"path":"2020/03/30/Hexo站点配置详解/","link":"","permalink":"https://hujiahao.top/2020/03/30/Hexo%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/","excerpt":"最强Hexo配置详解来了","text":"最强Hexo配置详解来了 Hexo ConfigurationDocs: https://hexo.io/docs/configuration.htmlSource: https://github.com/hexojs/hexo/Sitetitle: Hexo # 网站的标题，可能用在各种布局的页面中subtitle: # 网站子标题description: # 网站的描述性keywords: # 网站的关键字author: John Doe # 网站的作者language: # 网站采用语言，要跟/theme/*/languages/.yml下的文件名对应。timezone: # 网站的时区 URLIf your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘url: http://yoursite.com # 网站的url，如果不在域名根目录，应包含子目录，且root要设置为/子目录/root: / # 网站的根目录permalink: :year/:month/:day/:title/ #文章永久链接的形成模版。每一篇文章都有唯一的url。permalink_defaults: #文章永久链接中，各部分的默认值。 Directorysource_dir: source # 网站中源文件（比如Markdown啊什么的所在的文件夹）public_dir: public # 生成的静态网站的目录tag_dir: tags # 标签页所在的文件夹。archive_dir: archives # 文档页所在的文件夹category_dir: categories # 类别也所在的文件夹code_dir: downloads/code # 代码也所在的文件夹i18n_dir: :lang # 国际语言所在的文件夹skip_render: # 忽略文档清单 Writing 写作new_post_name: :title.md # 默认新建文档名，:title为变量，指文档标题，也可用其他变量default_layout: post # 新建文档的默认布局titlecase: false # 是否要把标题中的首字符大写external_link: true # 是否要在新开tab中打开外链filename_case: 0 # 文件名是否小写敏感render_drafts: false # 是否渲染草稿post_asset_folder: false # 是否启用资源文件夹。如启用，新建文档同时建立同名的资源文件夹relative_link: false # 是否把站内资源的链接改为站内相对链接。建议关闭。future: true # 文档中指定为未来时间创建highlight: enable: true # 是否开启代码高亮功能 line_number: true # 代码块中是否在前面加上行号 auto_detect: false # 是否自动检测代码块的语言（比如xml、JavaScript、mermaid等） tab_replace: # 用什么字符来代替tab(\\t)字符。 Home page settingpath: Root path for your blogs index page. (default = ‘’)per_page: Posts displayed per page. (0 = disable pagination)order_by: Posts order. (Order by date descending by default)index_generator: path: ‘’ # 主页所在路径，默认为’’ per_page: 10 # 主页的索引页包含文章数量，如未定义，则采用根目录下的per_page值 order_by: -date # 文章（Post类型）排序属性，-为降序 Category &amp; Tagdefault_category: uncategorized # 对文档的默认分类category_map: # 对文档中的分类字段进行映射。建立分类文件夹时采用映射后的字符串tag_map: # 对文档中的标签字段进行映射。建立标签文件夹时采用映射后的字符串 Date / Time formatHexo uses Moment.js to parse and display dateYou can customize the date format as defined inhttp://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD # 日期格式time_format: HH:mm:ss # 时间格式 PaginationSet per_page to 0 to disable paginationper_page: 10 # 主页/分类/标签/存档等类型索引页包含文章数量pagination_dir: page # 分页所在文件夹 Extensions # 扩展。放置插件和主题Plugins: https://hexo.io/plugins/Themes: https://hexo.io/themes/theme: landscape # 默认主题landscape DeploymentDocs: https://hexo.io/docs/deployment.htmldeploy: # 定义部署 type:————————————————版权声明：本文为CSDN博主「Guide2IT.COM」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/loze/article/details/94209583","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","permalink":"https://hujiahao.top/tags/Icarus/"}]},{"title":"Hexo+icarus基本配置","slug":"jc","date":"2020-03-29T06:35:18.000Z","updated":"2020-03-29T06:35:18.000Z","comments":true,"path":"2020/03/29/jc/","link":"","permalink":"https://hujiahao.top/2020/03/29/jc/","excerpt":"","text":"icarus这个主题比较小众，想要改什么在网上搜到的基本都是关于NexT的，对于我这种前端知识匮乏的人来说，还是有点费劲的，所以看了各种博客后，总结一下icarus的基本配置 下载icarus主题icarus官方文档地址：https://blog.zhangruipeng.me/hexo-theme-icarus/ 12主题下载地址: git clone https:&#x2F;&#x2F;github.com&#x2F;ppoffice&#x2F;hexo-theme-icarus themes&#x2F;icarus 配置主题更改站点配置文件_config.yml,将主题改为icarusHexo\\blog\\ _config.yml 1theme: icarus 打开Hexo\\blog\\themes\\icarus_config.yml配置主题内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181# Version of the Icarus theme that is currently usedversion: 2.3.0# 你的网站图标，可以搜索在线图标制作，并将其放在images文件夹中favicon: &#x2F;images&#x2F;favicons.ico# Path or URL to RSS atom.xmlrss: &#x2F;atom.xml# 显示在导航栏左侧的网站logo，同样可以自己制作logo: &#x2F;images&#x2F;gen.svg# Open Graph metadata# https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;helpers.html#open-graphopen_graph: # Facebook App ID fb_app_id: # Facebook Admin ID fb_admins: # Twitter ID twitter_id: # Twitter site twitter_site: # Google+ profile link google_plus: # 导航栏navbar: #菜单（显示名称：对应文件夹） menu: 主页: &#x2F; 归档: &#x2F;archives 分类: &#x2F;categories 标签: &#x2F;tags 关于: &#x2F;about # 导航栏右侧图标链接 links: My GitHub: icon: fab fa-github url: &#39;你的gityhub地址&#39;# Footer section link settingsfooter: # 页脚图标链接 links: Creative Commons: icon: fab fa-creative-commons url: &#39;https:&#x2F;&#x2F;creativecommons.org&#x2F;&#39; Attribution 4.0 International: icon: fab fa-creative-commons-by url: &#39;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by&#x2F;4.0&#x2F;&#39; Download on GitHub: icon: fab fa-github url: &#39;http:&#x2F;&#x2F;github.com&#x2F;ppoffice&#x2F;hexo-theme-icarus&#39;# 文章显示设置article: # Code highlight theme # https:&#x2F;&#x2F;github.com&#x2F;highlightjs&#x2F;highlight.js&#x2F;tree&#x2F;master&#x2F;src&#x2F;styles #代码主题atom-one-light亮色，atom-one-dark暗色 highlight: atom-one-dark # 是否显示文章主图 thumbnail: true # 是否显示估算阅读时间 readtime: true# 搜索插件设置# http:&#x2F;&#x2F;ppoffice.github.io&#x2F;hexo-theme-icarus&#x2F;categories&#x2F;Configuration&#x2F;Search-Pluginssearch: # Name of the search plugin type: insight# 评论插件设置# http:&#x2F;&#x2F;ppoffice.github.io&#x2F;hexo-theme-icarus&#x2F;categories&#x2F;Configuration&#x2F;Comment-Pluginscomment: #可选valine，disqus（科学上网）等 # Name of the comment plugin #type: valine #app_id: 不为空 #app_key: 不为空 #notify: true #verify: true #placeholder: type: disqus shortname: 不能为空# 打赏功能# http:&#x2F;&#x2F;ppoffice.github.io&#x2F;hexo-theme-icarus&#x2F;categories&#x2F;Donation&#x2F;donate: - # 阿里巴巴支付宝 type: alipay # 二维码图片 qrcode: &#39;&#x2F;images&#x2F;honbao.PNG&#39; - # 微信 type: wechat # 二维码图片 qrcode: &#39;&#x2F;images&#x2F;yjtp.png&#39; -# 分享插件设置# http:&#x2F;&#x2F;ppoffice.github.io&#x2F;hexo-theme-icarus&#x2F;categories&#x2F;Configuration&#x2F;Share-Pluginsshare: # 插件类型，有多种，可选，自行百度 type: sharejs# Sidebar settings.# Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # 左侧边栏设置 left: # 是否不随页面滚动 # http:&#x2F;&#x2F;ppoffice.github.io&#x2F;hexo-theme-icarus&#x2F;Configuration&#x2F;Theme&#x2F;make-a-sidebar-sticky-when-page-scrolls&#x2F; sticky: false # 右侧边栏设置 right: # 是否不随页面滚动 # http:&#x2F;&#x2F;ppoffice.github.io&#x2F;hexo-theme-icarus&#x2F;Configuration&#x2F;Theme&#x2F;make-a-sidebar-sticky-when-page-scrolls&#x2F; sticky: false# 边栏小部件设置# http:&#x2F;&#x2F;ppoffice.github.io&#x2F;hexo-theme-icarus&#x2F;categories&#x2F;Widgets&#x2F;widgets: - # 个人信息 type: profile # 部件位置（左） position: left # 作者名（字符串） author: 飞鱼 # 作者身份描述（字符串） author_title: Student # 作者当前居住地 location: China,Fujian # 头像（可用本地图片或网络图片链接） avatar: &#39;&#x2F;images&#x2F;ava.png&#39; # Email address for the Gravatar to be shown in the profile widget gravatar: # 关注我的链接，可设为你的GitHub主页 follow_link: &#39;https:&#x2F;&#x2F;github.com&#x2F;yourname&#39; # 个人介绍部件底部图标社交链接 social_links: Github: icon: fab fa-github url: &#39;https:&#x2F;&#x2F;github.com&#x2F;yourname&#39; Facebook: icon: fab fa-facebook url: &#39;https:&#x2F;&#x2F;facebook.com&#39; Twitter: icon: fab fa-twitter url: &#39;https:&#x2F;&#x2F;twitter.com&#x2F;yourname&#39; RSS: icon: fas fa-rss url: &#x2F; - # Widget name type: toc # Where should the widget be placed, left or right position: left - # 分类 type: category # 位置指定 position: left - # 标签云 type: tagcloud # 位置 position: right - # 近期文章 type: recent_posts # 位置 position: left - # 归档 type: archive # Where should the widget be placed, left or right position: right - # 标签 type: tag # Where should the widget be placed, left or right position: right - # 外部链接 type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: Google: &#39;https:&#x2F;&#x2F;google.com&#39; Baidu: &#39;https:&#x2F;&#x2F;baidu.com&#39; 参考网站 https://blog.csdn.net/marvine/article/details/89816846 未完，待续。。。。。。。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","permalink":"https://hujiahao.top/tags/Icarus/"}]},{"title":"解决浏览器打不开github常用方法","slug":"解决浏览器打不开github的常用方法","date":"2020-03-29T06:29:22.000Z","updated":"2020-03-29T06:29:22.000Z","comments":true,"path":"2020/03/29/解决浏览器打不开github的常用方法/","link":"","permalink":"https://hujiahao.top/2020/03/29/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E4%B8%8D%E5%BC%80github%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"GitHub是一个面向开源及私有软件项目的托管平台，相信是大家经常需要访问的网站，但是有一些朋友反馈GitHub网站打不开的问题，这是由于GitHub网站毕竟是国外网站所以呢，访问上会出现一些网络问题，通过给网站指定IP地址的方法可以解决，也就是修改hosts文件了。","text":"GitHub是一个面向开源及私有软件项目的托管平台，相信是大家经常需要访问的网站，但是有一些朋友反馈GitHub网站打不开的问题，这是由于GitHub网站毕竟是国外网站所以呢，访问上会出现一些网络问题，通过给网站指定IP地址的方法可以解决，也就是修改hosts文件了。 一、确定github网站的ip打开网址：http://github.com.ipaddress.com/192.30.253.112 github.com 192.30.253.113 github.com 二、确定域名ip打开网址：http://github.global.ssl.fastly.net.ipaddress.com/或者是151.101.185.194 github.global.ssl.fastly.net 151.101.13.194 github.global.ssl.fastly.net 三、确定静态资源ip打开网址：http://assets-cdn.github.com.ipaddress.com/151.101.12.133 assets-cdn.github.com 151.101.184.133 assets-cdn.github.com 四、修改hosts文件找到hosts文件。地址：C:\\Windows\\System32\\Drivers\\etc不能直接修改hosts文件，需要将文件复制粘贴到桌面（或其它地方） 写到hosts最下方即可 192.30.253.112 github.com192.30.253.113 github.com151.101.185.194 github.global.ssl.fastly.net151.101.13.194 github.global.ssl.fastly.net151.101.12.133 assets-cdn.github.com151.101.184.133 assets-cdn.github.com附：https://www.ipaddress.com/ 此网站可以查询网址的ip","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","permalink":"https://hujiahao.top/tags/Icarus/"}]}],"categories":[{"name":"SSM","slug":"SSM","permalink":"https://hujiahao.top/categories/SSM/"},{"name":"随笔","slug":"随笔","permalink":"https://hujiahao.top/categories/%E9%9A%8F%E7%AC%94/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/categories/Java/"},{"name":"Mybatis","slug":"Mybatis","permalink":"https://hujiahao.top/categories/Mybatis/"},{"name":"English","slug":"English","permalink":"https://hujiahao.top/categories/English/"},{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/categories/Hexo/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://hujiahao.top/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"https://hujiahao.top/tags/Spring/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://hujiahao.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Java","slug":"Java","permalink":"https://hujiahao.top/tags/Java/"},{"name":"Mybatis","slug":"Mybatis","permalink":"https://hujiahao.top/tags/Mybatis/"},{"name":"English","slug":"English","permalink":"https://hujiahao.top/tags/English/"},{"name":"动词短语","slug":"动词短语","permalink":"https://hujiahao.top/tags/%E5%8A%A8%E8%AF%8D%E7%9F%AD%E8%AF%AD/"},{"name":"固定搭配","slug":"固定搭配","permalink":"https://hujiahao.top/tags/%E5%9B%BA%E5%AE%9A%E6%90%AD%E9%85%8D/"},{"name":"算法","slug":"算法","permalink":"https://hujiahao.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"非谓语动词","slug":"非谓语动词","permalink":"https://hujiahao.top/tags/%E9%9D%9E%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/"},{"name":"Hexo","slug":"Hexo","permalink":"https://hujiahao.top/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","permalink":"https://hujiahao.top/tags/Icarus/"}]}